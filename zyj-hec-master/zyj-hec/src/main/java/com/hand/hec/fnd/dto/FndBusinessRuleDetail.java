package com.hand.hec.fnd.dto;

/**
 * Auto Generated By Hap Code Generator
 **/

import javax.persistence.GeneratedValue;
import javax.persistence.Id;

import com.hand.hap.core.BaseConstants;
import com.hand.hap.mybatis.annotation.ExtensionAttribute;
import com.hand.hap.mybatis.common.query.*;
import lombok.*;
import org.hibernate.validator.constraints.Length;

import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.criteria.JoinType;

import com.hand.hap.system.dto.BaseDTO;
import org.hibernate.validator.constraints.NotEmpty;

@ExtensionAttribute(disable = true)
@Table(name = "fnd_business_rule_detail")
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Builder
@ToString
public class FndBusinessRuleDetail extends BaseDTO {

    public static final String FIELD_DETAIL_ID = "detailId";
    public static final String FIELD_BUSINESS_RULE_ID = "businessRuleId";
    public static final String FIELD_SEQUENCE = "sequence";
    public static final String FIELD_PARAMETER_ID = "parameterId";
    public static final String FIELD_AND_OR = "andOr";
    public static final String FIELD_LEFT_PARENTHESIS = "leftParenthesis";
    public static final String FIELD_RIGHT_PARENTHESIS = "rightParenthesis";
    public static final String FIELD_CONDITION_TYPE = "conditionType";
    public static final String FIELD_CONDITION_VALUE = "conditionValue";
    public static final String FIELD_ENABLED_FLAG = "enabledFlag";


    public static final String CONDITION_TYPE_EQ = "EQ";
    public static final String CONDITION_TYPE_NEQ = "NEQ";
    public static final String CONDITION_TYPE_GT = "GT";
    public static final String CONDITION_TYPE_GTEQUAL = "GTEQUAL";
    public static final String CONDITION_TYPE_LT = "LT";
    public static final String CONDITION_TYPE_LTEQUAL = "LTEQUAL";
    public static final String CONDITION_TYPE_LIKE = "LIKE";
    public static final String CONDITION_TYPE_EXIST_EQ = "EXIST_EQ";
    public static final String CONDITION_TYPE_EXIST_NEQ = "EXIST_NEQ";
    public static final String CONDITION_TYPE_EXIST_GT = "EXIST_GT";
    public static final String CONDITION_TYPE_EXIST_GTEQUAL = "EXIST_GTEQUAL";
    public static final String CONDITION_TYPE_EXIST_LT = "EXIST_LT";
    public static final String CONDITION_TYPE_EXIST_LTEQUAL = "EXIST_LTEQUAL";
    public static final String CONDITION_TYPE_EXIST_LIKE = "EXIST_LIKE";

    public static final String LOGICAL_AND = "AND";
    public static final String LOGICAL_OR = "OR";

    public static final String YES_NO_Y = "Y";
    public static final String YES_NO_N = "N";

    public static final String PARENTHESIS_LEFT = "(";
    public static final String PARENTHESIS_RIGHT = ")";

    /**
     * 权限规则明细ID
     */
    @Id
    @GeneratedValue
    private Long detailId;

    /**
     * 权限规则ID
     */
    @Where
    private Long businessRuleId;

    /**
     * 序号
     */
    private Long sequence;

    /**
     * 参数ID
     */
    @JoinTable(name = "parameterJoin", joinMultiLanguageTable = true, target = FndBusinessRuleParameter.class,
                    type = JoinType.LEFT, on = {@JoinOn(joinField = FndBusinessRuleParameter.FIELD_PARAMETER_ID),
                            @JoinOn(joinField = BaseDTO.FIELD_LANG, joinExpression = BaseConstants.PLACEHOLDER_LOCALE)})
    private Long parameterId;

    /**
     * 参数名称
     */
    @Transient
    @JoinColumn(joinName = "parameterJoin", field = FndBusinessRuleParameter.FIELD_PARAMETER_NAME)
    private String parameterName;

    /**
     * AND/OR
     */
    @Length(max = 30)
    private String andOr;

    /**
     * 左括号
     */
    @Length(max = 30)
    private String leftParenthesis;

    /**
     * 右括号
     */
    @Length(max = 30)
    private String rightParenthesis;

    /**
     * 条件类型
     */
    @NotEmpty
    @Length(max = 30)
    private String conditionType;

    /**
     * 条件类型
     */
    @Transient
    @JoinCode(code = "FND_RULE_CONDITION", joinKey = FndBusinessRuleDetail.FIELD_CONDITION_TYPE)
    private String conditionTypeName;

    /**
     * 条件值
     */
    @NotEmpty
    @Length(max = 2000)
    private String conditionValue;

    /**
     * 启用标志
     */
    @Length(max = 1)
    private String enabledFlag;

}
