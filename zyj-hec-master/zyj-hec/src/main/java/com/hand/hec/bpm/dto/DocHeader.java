package com.hand.hec.bpm.dto;

/**
 * Auto Generated By Hap Code Generator
 **/

import com.hand.hap.core.BaseConstants;
import com.hand.hap.exp.dto.ExpEmployee;
import com.hand.hap.fnd.dto.Company;
import com.hand.hap.fnd.dto.FndCompany;
import com.hand.hap.hr.dto.Employee;
import com.hand.hap.hr.dto.HrOrgUnit;
import com.hand.hap.hr.dto.Position;
import com.hand.hap.mybatis.annotation.ExtensionAttribute;
import com.hand.hap.mybatis.common.query.*;
import com.hand.hap.system.dto.BaseDTO;
import com.hand.hec.exp.dto.ExpOrgPosition;
import com.hand.hec.exp.dto.ExpOrgUnit;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.hibernate.validator.constraints.Length;

import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.criteria.JoinType;
import java.util.List;

/**
 * @author xxx@hand-china.com
 */

@ExtensionAttribute(disable = true)
@Table(name = "bpm_doc_header")
@Getter
@Setter
@ToString
@NoArgsConstructor
public class DocHeader extends BaseDTO {

    public static final String FIELD_DOC_HEADER_ID = "docHeaderId";
    public static final String FIELD_COMPANY_ID = "companyId";
    public static final String FIELD_UNIT_ID = "unitId";
    public static final String FIELD_POSITION_ID = "positionId";
    public static final String FIELD_EMPLOYEE_ID = "employeeId";
    public static final String FIELD_DOCUMENT_NUMBER = "documentNumber";
    public static final String FIELD_OA_FLOW_CATEGORY = "oaFlowCategory";
    public static final String FIELD_OA_FLOW_SUBCATEGORY = "oaFlowSubcategory";
    public static final String FIELD_DOCUMENT_DATE = "documentDate";
    public static final String FIELD_DOCUMENT_STATUS = "documentStatus";
    public static final String FIELD_NOTE = "note";
    public static final String FIELD_TEMPLATE_ID = "templateId";
    public static final String FIELD_PAGE_GROUP_ID = "pageGroupId";

    public static final String FIELD_EMPLOYEE_NAME = "employeeName";
    public static final String FIELD_POSITION_NAME = "positionName";
    public static final String FIELD_COMPANY_NAME = "companyName";
    public static final String FIELD_UNIT_NAME = "unitName";


    /**
     * 单据头ID
     */
    @Id
    @GeneratedValue
    @Where
    private Long docHeaderId;

    /**
     * 公司ID
     */
    @Where
    @JoinTable(name = "companyField", joinMultiLanguageTable = true, target = FndCompany.class, type = JoinType.LEFT,
                    on = {@JoinOn(joinField = FndCompany.FIELD_COMPANY_ID),
                            @JoinOn(joinField = BaseDTO.FIELD_LANG, joinExpression = BaseConstants.PLACEHOLDER_LOCALE)})
    private Long companyId;

    @Transient
    @JoinColumn(joinName = "companyField", field = FndCompany.FIELD_COMPANY_SHORT_NAME)
    private String companyName;

    /**
     * 部门ID
     */
    @Where
    @JoinTable(name = "unitField", joinMultiLanguageTable = true, target = ExpOrgUnit.class, type = JoinType.LEFT,
                    on = {@JoinOn(joinField = ExpOrgUnit.FIELD_UNIT_ID),
                            @JoinOn(joinField = BaseDTO.FIELD_LANG, joinExpression = BaseConstants.PLACEHOLDER_LOCALE)})
    private Long unitId;

    @Transient
    @JoinColumn(joinName = "unitField", field = ExpOrgUnit.FIELD_DESCRIPTION)
    private String unitName;

    /**
     * 岗位ID
     */
    @Where
    @JoinTable(name = "positionField", joinMultiLanguageTable = true, target = ExpOrgPosition.class,
                    type = JoinType.LEFT, on = {@JoinOn(joinField = ExpOrgPosition.FIELD_POSITION_ID),
                            @JoinOn(joinField = BaseDTO.FIELD_LANG, joinExpression = BaseConstants.PLACEHOLDER_LOCALE)})
    private Long positionId;

    @Transient
    @JoinColumn(joinName = "positionField", field = ExpOrgPosition.FIELD_DESCRIPTION)
    private String positionName;

    /**
     * 员工ID
     */
    @Where
    @JoinTable(name = "employeeField", joinMultiLanguageTable = false, target = ExpEmployee.class, type = JoinType.LEFT,
                    on = {@JoinOn(joinField = ExpEmployee.FIELD_EMPLOYEE_ID)})
    private Long employeeId;

    @Transient
    @JoinColumn(joinName = "employeeField", field = ExpEmployee.FIELD_NAME)
    private String employeeName;

    /**
     * 单据编号
     */
    @Length(max = 2147483647)
    @Where
    private String documentNumber;

    /**
     * 流程类别
     */
    @Length(max = 2147483647)
    @Where
    private String oaFlowCategory;

    @Transient
    @JoinCode(code = "BPM.OA_FLOW_CATEGORY", joinKey = DocHeader.FIELD_OA_FLOW_CATEGORY)
    private String oaFlowCategoryDesc;

    /**
     * 流程子类别
     */
    @Length(max = 2147483647)
    @Where
    private String oaFlowSubcategory;

    @Transient
    @JoinCode(code = "BPM.OA_FLOW_SUB_CATEGORY", joinKey = DocHeader.FIELD_OA_FLOW_SUBCATEGORY)
    private String oaFlowSubCategoryDesc;

    /**
     * 单据日期
     */
    @Length(max = 2147483647)
    @Where
    private String documentDate;

    /**
     * 单据状态
     */
    @Length(max = 2147483647)
    @Where
    private String documentStatus;

    /**
     * 备注
     */
    @Length(max = 2147483647)
    @Where
    private String note;

    /**
     * 模板ID
     */
    @Where
    @JoinTable(name = "templateField", target = Template.class, type = JoinType.LEFT,
                    on = {@JoinOn(joinField = Template.FIELD_TEMPLATE_ID)})
    private Long templateId;

    @Transient
    @JoinColumn(joinName = "templateField", field = Template.FIELD_TEMPLATE_DESC)
    private String templateDesc;

    @Transient
    @JoinColumn(joinName = "templateField", field = Template.FIELD_SCREEN)
    private String screen;


    /**
     * 页面组ID
     */
    @Where
    @JoinTable(name = "groupJoin", joinMultiLanguageTable = false, target = PageGroup.class, type = JoinType.LEFT,
                    on = {@JoinOn(joinField = PageGroup.FIELD_GROUP_ID)})
    private Long pageGroupId;

    @Transient
    @JoinColumn(joinName = "groupJoin", field = PageGroup.FIELD_GROUP_DESC)
    private String pageGroupDesc;

    @Transient
    private Long pageId;

    @Transient
    private List<Tplt001Header> tplt001Headers;
}
