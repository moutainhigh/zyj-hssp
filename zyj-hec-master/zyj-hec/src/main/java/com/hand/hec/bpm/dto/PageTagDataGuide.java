package com.hand.hec.bpm.dto;

/**
 * Auto Generated By Code Generator
 * Description:
 */

import com.hand.hap.mybatis.annotation.ExtensionAttribute;
import com.hand.hap.mybatis.common.query.*;
import com.hand.hap.system.dto.BaseDTO;
import org.hibernate.validator.constraints.Length;
import org.springframework.stereotype.Component;

import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.criteria.JoinType;

@Component
@ExtensionAttribute(disable = true)
@Table(name = "bpm_page_tag_data_guide")
public class PageTagDataGuide extends BaseDTO {

    public static final String FIELD_GUIDE_ID = "guideId";
    public static final String FIELD_TAG_ID = "tagId";
    public static final String FIELD_UPDATE_EVENT_ID = "updateEventId";
    public static final String FIELD_TARGET_TAG_ID = "targetTagId";
    public static final String FIELD_TARGET_LAYOUT_ID = "targetLayoutId";
    public static final String FIELD_GUIDE_SEQUENCE = "guideSequence";
    public static final String FIELD_CURRENT_LOGIC_TYPE = "currentLogicType";
    public static final String FIELD_TRIGGER_CONDITION = "triggerCondition";
    public static final String FIELD_CONDITION_VALUE = "conditionValue";
    public static final String FIELD_READONLY_FLAG = "readonlyFlag";
    public static final String FIELD_REQUIRED_FLAG = "requiredFlag";
    public static final String FIELD_HIDDEN_FLAG = "hiddenFlag";
    public static final String FIELD_CLEAR_FLAG = "clearFlag";
    public static final String FIELD_TARGET_VALUE = "targetValue";
    public static final String FIELD_FILTER_NAME = "filterName";
    public static final String FIELD_TRIGGER_TYPE = "triggerType";
    public static final String FIELD_LOAD_EVENT_ID = "loadEventId";
    public static final String FIELD_FORMULA = "formula";

    public static final String FIELD_READONLY_FLAG_DESC = "readonlyFlagDesc";
    public static final String FIELD_REQUIRED_FLAG_DESC = "requiredFlagDesc";
    public static final String FIELD_HIDDEN_FLAG_DESC = "hiddenFlagDesc";
    public static final String FIELD_CLEAR_FLAG_DESC = "clearFlagDesc";
    public static final String FIELD_TARGET_LAYOUT_DESC = "targetLayoutDesc";
    public static final String FIELD_TARGET_TAG_DESC = "targetTagDesc";


    @Id
    @GeneratedValue
    @Where
    private Long guideId;//PK

    @Where
    private Long tagId;//标签ID

    private Long updateEventId;//数据变更对应的事件ID

    @JoinTable(name = "targetTag", target = PageTagBasic.class, type = JoinType.LEFT, on = {@JoinOn(joinField = PageTagBasic.FIELD_TAG_ID)})
    private Long targetTagId;//目标标签

    @JoinTable(name = "targetLayout", target = PageLayoutBasic.class, type = JoinType.LEFT, on = {@JoinOn(joinField = PageLayoutBasic.FIELD_LAYOUT_ID)})
    private Long targetLayoutId;//目标布局组件

    private Long guideSequence;//序号

    @Length(max = 23)
    private String currentLogicType;//当前逻辑类型

    @Length(max = 23)
    private String triggerCondition;//触发条件

    @Length(max = 23)
    private String conditionValue;//触发条件值

    @Length(max = 23)
    private String readonlyFlag;//只读标志

    @Length(max = 23)
    private String requiredFlag;//必输标志

    @Length(max = 23)
    private String hiddenFlag;//隐藏标志

    @Length(max = 23)
    private String clearFlag;//清空标志

    @Length(max = 23)
    private String targetValue;//赋值

    @Length(max = 23)
    private String filterName;//过滤条件名称

    @Length(max = 23)
    private String triggerType;//触发类型,值变更\值初始化

    private Long loadEventId;//数据加载对应的事件ID

    @Transient
    @Length(max = 200)
    @JoinCode(code = "BPM.TAG_READABLE", joinKey = FIELD_READONLY_FLAG)
    private String readonlyFlagDesc;

    @Transient
    @Length(max = 200)
    @JoinCode(code = "BPM.TAG_REQUIRABLE", joinKey = FIELD_REQUIRED_FLAG)
    private String requiredFlagDesc;

    @Transient
    @Length(max = 200)
    @JoinCode(code = "BPM.TAG_SHOWABLE", joinKey = FIELD_HIDDEN_FLAG)
    private String hiddenFlagDesc;

    @Transient
    @Length(max = 200)
    @JoinCode(code = "BPM.TAG_CLEAR", joinKey = FIELD_CLEAR_FLAG)
    private String clearFlagDesc;

    @Transient
    @Length(max = 200)
    @JoinColumn(joinName = "targetLayout", field = PageLayoutBasic.FIELD_LAYOUT_DESC)
    private String targetLayoutDesc;

    @Transient
    @Length(max = 200)
    @JoinColumn(joinName = "targetTag", field = PageTagBasic.FIELD_TAG_DESC)
    private String targetTagDesc;

    @Length(max = 4000)
    private String formula;


    public void setGuideId(Long guideId) {
        this.guideId = guideId;
    }

    public Long getGuideId() {
        return guideId;
    }

    public void setTagId(Long tagId) {
        this.tagId = tagId;
    }

    public Long getTagId() {
        return tagId;
    }

    public void setUpdateEventId(Long updateEventId) {
        this.updateEventId = updateEventId;
    }

    public Long getUpdateEventId() {
        return updateEventId;
    }

    public void setTargetTagId(Long targetTagId) {
        this.targetTagId = targetTagId;
    }

    public Long getTargetTagId() {
        return targetTagId;
    }

    public void setTargetLayoutId(Long targetLayoutId) {
        this.targetLayoutId = targetLayoutId;
    }

    public Long getTargetLayoutId() {
        return targetLayoutId;
    }

    public void setGuideSequence(Long guideSequence) {
        this.guideSequence = guideSequence;
    }

    public Long getGuideSequence() {
        return guideSequence;
    }

    public void setCurrentLogicType(String currentLogicType) {
        this.currentLogicType = currentLogicType;
    }

    public String getCurrentLogicType() {
        return currentLogicType;
    }

    public void setTriggerCondition(String triggerCondition) {
        this.triggerCondition = triggerCondition;
    }

    public String getTriggerCondition() {
        return triggerCondition;
    }

    public void setConditionValue(String conditionValue) {
        this.conditionValue = conditionValue;
    }

    public String getConditionValue() {
        return conditionValue;
    }

    public void setReadonlyFlag(String readonlyFlag) {
        this.readonlyFlag = readonlyFlag;
    }

    public String getReadonlyFlag() {
        return readonlyFlag;
    }

    public void setRequiredFlag(String requiredFlag) {
        this.requiredFlag = requiredFlag;
    }

    public String getRequiredFlag() {
        return requiredFlag;
    }

    public void setHiddenFlag(String hiddenFlag) {
        this.hiddenFlag = hiddenFlag;
    }

    public String getHiddenFlag() {
        return hiddenFlag;
    }

    public void setClearFlag(String clearFlag) {
        this.clearFlag = clearFlag;
    }

    public String getClearFlag() {
        return clearFlag;
    }

    public void setTargetValue(String targetValue) {
        this.targetValue = targetValue;
    }

    public String getTargetValue() {
        return targetValue;
    }

    public void setFilterName(String filterName) {
        this.filterName = filterName;
    }

    public String getFilterName() {
        return filterName;
    }

    public void setTriggerType(String triggerType) {
        this.triggerType = triggerType;
    }

    public String getTriggerType() {
        return triggerType;
    }

    public void setLoadEventId(Long loadEventId) {
        this.loadEventId = loadEventId;
    }

    public Long getLoadEventId() {
        return loadEventId;
    }

    public String getReadonlyFlagDesc() {
        return readonlyFlagDesc;
    }

    public void setReadonlyFlagDesc(String readonlyFlagDesc) {
        this.readonlyFlagDesc = readonlyFlagDesc;
    }

    public String getRequiredFlagDesc() {
        return requiredFlagDesc;
    }

    public void setRequiredFlagDesc(String requiredFlagDesc) {
        this.requiredFlagDesc = requiredFlagDesc;
    }

    public String getHiddenFlagDesc() {
        return hiddenFlagDesc;
    }

    public void setHiddenFlagDesc(String hiddenFlagDesc) {
        this.hiddenFlagDesc = hiddenFlagDesc;
    }

    public String getClearFlagDesc() {
        return clearFlagDesc;
    }

    public void setClearFlagDesc(String clearFlagDesc) {
        this.clearFlagDesc = clearFlagDesc;
    }

    public String getTargetLayoutDesc() {
        return targetLayoutDesc;
    }

    public void setTargetLayoutDesc(String targetLayoutDesc) {
        this.targetLayoutDesc = targetLayoutDesc;
    }

    public String getTargetTagDesc() {
        return targetTagDesc;
    }

    public void setTargetTagDesc(String targetTagDesc) {
        this.targetTagDesc = targetTagDesc;
    }

    public String getFormula() {
        return formula;
    }

    public void setFormula(String formula) {
        this.formula = formula;
    }
}
