<?xml version="1.0" encoding="UTF-8"?>
<!--
    $Author: xiuxian.wu
    $Date: 2018/03/06 9:47:59 $
    $Revision: 1.0
    $Purpose: 机票行
-->
<a:screen xmlns:c="aurora.application.action" xmlns:p="uncertain.proc" xmlns:a="http://www.aurora-framework.org/application" xmlns:s="aurora.plugin.script" trace="true">
    <!--<a:init-procedure>
        <a:model-query defaultWhereClause="v.reportPageElementCode = &apos;TICKET_UNIFIED&apos;" model="expm.EXP5110.exp_report_line_dimension_fields_query" rootPath="ticket_unified_line_dimensions"/>
        <a:model-query defaultWhereClause="v.reportPageElementCode = &apos;TICKET_UNIFIED&apos;" model="expm.EXP5110.exp_report_line_object_fields_query" rootPath="ticket_unified_line_objects"/>
        <a:model-query defaultWhereClause="v.reportPageElementCode = &apos;TICKET_UNIFIED&apos; " model="hec_util.exp_util.exp_rep_ele_invoice_flag" rootPath="ticket_unified_line_element"/>
        <a:model-query defaultWhereClause="erpe.reportPageElementCode = &apos;TICKET_UNIFIED&apos;" model="expm.EXP5110.exp_report_line_description_query" rootPath="ticket_unified_description"/>
    </a:init-procedure>-->
    <a:view>
        <a:link id="EXP5110_exp_report_maintain_vat_invoice_list_ticket_unified_link" url="$[/request/@context_path]/expm/EXP5110/exp_report_maintain_vat_invoice_list.screen"/>
        <a:link id="exp_report_ticket_unified_for_element_delete_link" model="exp.EXP4070.exp_report_ticket_unified_for_element" modelaction="batch_update"/>
        <a:link id="EXP5110_exp_report_ticket_unified_more_invoice_standard_link" url="$[/request/@context_path]/expm/EXP5110/exp_report_maintain_more_invoice.screen"/>
        <a:link id="EXP5110_exp_report_ticket_unified_vat_invoice_more_tax_link" url="$[/request/@context_path]/expm/EXP5110/exp_report_maintain_vat_invoice_more_tax.screen"/>
        <a:link id="EXP5110_exp_report_ticket_unified_cancel_report_realation_link" model="db.vat_invoice_relation_pkg.cancel_report_realation" modelaction="update"/>
        <script><![CDATA[
            function EXP5110_ticket_unifiedGetNextLineNumber() {
                var nextLineNumber = 10;
            
                var allPmtRecords = $au('EXP5110_exp_report_ticket_unified_line_ds').getAll();
                Ext.each(allPmtRecords, function(allPmtRecord) {
                    if (allPmtRecord.get('lineNumber') >= nextLineNumber) {
                        nextLineNumber = allPmtRecord.get('lineNumber') + 10;
                    }
                }, this);
            
                return nextLineNumber;
            }
            
            
            function EXP5110_ticketUnifiedLineAdd(reqDatas) {
                // debugger;
                if (reqDatas && reqDatas.length && reqDatas.length != 0) {
                    var headerRecord = $au('EXP5110_exp_report_header_ds').getAt(0);
                    //从申请单创建
                    Ext.each(reqDatas, function(reqData) {
                        var data = {};
                        // for (var fieldName in reqDatas['fields']) {
                        // data[fieldName] = reqData[fieldName];
                        // }
                        data = reqData;
                        data['reportPageElementCode'] = 'TICKET_UNIFIED';
                        data['expReportHeaderId'] = headerRecord.get('expReportHeaderId');
                        data['lineNumber'] = EXP5110_ticket_unifiedGetNextLineNumber();
                        $au('EXP5110_exp_report_ticket_unified_line_ds').create(data);
                    }, this);
                    var vatInvoiceFlag = headerRecord.get('vatInvoiceFlag');
                    if (vatInvoiceFlag == 'Y') {
                        var records = $au('EXP5110_exp_report_ticket_unified_line_ds').getAll();
                        for (var i = 0;i < records.length;i++) {
                            // records[i].getMeta().getField('lineInvoiceTypeDesc').setRequired(true);
                        }
                    }
                } else {
                    var selectedRecords = $au('EXP5110_exp_report_ticket_unified_line_ds').getSelected();
                    if (selectedRecords && selectedRecords.length) {
                        Ext.each(selectedRecords, function(selectedRecord) {
                            var data = {};
                            for (var field in $au('EXP5110_exp_report_ticket_unified_line_ds').fields) {
                                data[field] = selectedRecord.get(field);
                            }
                            data['expReportLineId'] = null;
                            data['lineNumber'] = EXP5110_ticket_unifiedGetNextLineNumber();
                            $au('EXP5110_exp_report_ticket_unified_line_ds').create(data);
                        });
                    } else {
                        var data = {};
                        var lineDs = $au('EXP5110_exp_report_ticket_unified_line_ds');
                        headerRecord = $au('EXP5110_exp_report_header_ds').getAt(0);
                        data['reportPageElementCode'] = 'TICKET_UNIFIED';
                        data['lineNumber'] = EXP5110_ticket_unifiedGetNextLineNumber();
                        data['expReportHeaderId'] = headerRecord.get('expReportHeaderId');
                        data['companyName'] = headerRecord.get('companyName');
                        data['companyId'] = headerRecord.get('companyId');
                        data['accEntityName'] = headerRecord.get('accEntityName');
                        data['accEntityId'] = headerRecord.get('accEntityId');
                        data['unitName'] = headerRecord.get('unitName');
                        data['unitId'] = headerRecord.get('unitId');
                        data['positionName'] = headerRecord.get('positionName');
                        data['positionId'] = headerRecord.get('positionId');
                        data['employeeName'] = headerRecord.get('employeeName');
                        data['employeeId'] = headerRecord.get('employeeId');
                        data['respCenterName'] = headerRecord.get('respCenterName');
                        data['respCenterId'] = headerRecord.get('respCenterId');
                        data['primaryQuantity'] = 1;
                        data['businessCurrencyName'] = headerRecord.get('paymentCurrencyName');
                        data['businessCurrencyCode'] = headerRecord.get('paymentCurrencyCode');
                        data['businessCurrencyPrecision'] = headerRecord.get('paymentCurrencyPrecision');
                        data['biz2payExchangeTypeName'] = null;
                        data['biz2payExchangeType'] = null;
                        data['biz2payExchangeRate'] = 1;
                        data['paymentCurrencyName'] = headerRecord.get('paymentCurrencyName');
                        data['paymentCurrencyCode'] = headerRecord.get('paymentCurrencyCode');
                        data['pay2funExchangeTypeName'] = headerRecord.get('pay2funExchangeTypeName');
                        data['pay2funExchangeType'] = headerRecord.get('pay2funExchangeType');
                        data['pay2funExchangeRate'] = headerRecord.get('pay2funExchangeRate');
                        data['managementCurrencyName'] = headerRecord.get('managementCurrencyName');
                        data['managementCurrencyCode'] = headerRecord.get('managementCurrencyCode');
                        data['pay2magExchangeTypeName'] = headerRecord.get('pay2magExchangeTypeName');
                        data['pay2magExchangeType'] = headerRecord.get('pay2magExchangeType');
                        data['pay2magExchangeRate'] = headerRecord.get('pay2magExchangeRate');
                        data['accEntityId'] = headerRecord.get('accEntityId');
                        data['accEntityName'] = headerRecord.get('accEntityName');
                        data['respCenterId'] = headerRecord.get('respCenterId');
                        data['respCenterName'] = headerRecord.get('respCenterName');
                        data['bgtEntityId'] = headerRecord.get('bgtEntityId');
                        data['bgtEntityName'] = headerRecord.get('bgtEntityName');
                        data['bgtCenterId'] = headerRecord.get('bgtCenterId');
                        data['bgtCenterName'] = headerRecord.get('bgtCenterName');
                        data['periodName'] = headerRecord.get('periodName');
                        data['dateFrom'] = headerRecord.get('reportDate');
                        data['dateTo'] = headerRecord.get('reportDate');
                        for (var i = 1;i <= 20;i++) {
                            data['dimension' + i + 'Id'] = lineDs.fields['dimension' + i + 'Id'] ? lineDs.fields['dimension' + i + 'Id'].pro.defaultvalue : '';
                            data['dimension' + i + 'Name'] = lineDs.fields['dimension' + i + 'Name'] ? lineDs.fields['dimension' + i + 'Name'].pro.defaultvalue : '';
                        }
            
                        //新增行的时候将默认报销类型自动带出
                        //modified by liliang 2018/11/22
                        //begin
                        var expense_type_default_ds = $au('EXP5110_ticket_unified_place_type_default_ds').getAt(0);
                        data['moExpenseTypeId'] = expense_type_default_ds == undefined ? '' : expense_type_default_ds.get('moExpenseTypeId');
                        data['moExpenseTypeName'] = expense_type_default_ds == undefined ? '' : expense_type_default_ds.get('moExpenseTypeName');
                        //end
                        $au('EXP5110_exp_report_ticket_unified_line_ds').create(data);
                    }
                    var vatInvoiceFlag = headerRecord.get('vatInvoiceFlag');
                    if (vatInvoiceFlag == 'Y') {
                        var records = $au('EXP5110_exp_report_ticket_unified_line_ds').getAll();
                        for (var j = 0;j < records.length;j++) {
                            // records[j].getMeta().getField('lineInvoiceTypeDesc').setRequired(true);
                        }
                    }
                }
            }
            
            function EXP5110_ticketUnifiedLineAdd_New() {
                var vExpReportHeaderId = headerRecord.get('expReportHeaderId');
                $au('EXP5110_exp_report_ticket_unified_line_ds').setQueryParameter('expReportHeaderId', vExpReportHeaderId);
                $au('EXP5110_exp_report_ticket_unified_line_ds').query();
                $au('EXP5110_pmt_schedules_ds').query();
            }
            
            function EXP5110_ticket_unifiedDistAdd() {
                var selectedRecords = $au('EXP5110_exp_report_ticket_unified_dist_ds').getSelected();
                if (selectedRecords && selectedRecords.length) {
                    Ext.each(selectedRecords, function(selectedRecord) {
                        var data = {};
                        for (var field in $au('EXP5110_exp_report_ticket_unified_dist_ds').fields) {
                            data[field] = selectedRecord.get(field);
                        }
                        data['expReportDistId'] = null;
                        $au('EXP5110_exp_report_ticket_unified_dist_ds').create(data);
                    });
                } else {
                    var data = {};
                    var lineDs = $au('EXP5110_exp_report_ticket_unified_line_ds');
                    var lineRecord = lineDs.getCurrentRecord();
                    var distDs = $au('EXP5110_exp_report_ticket_unified_dist_ds');
                    data['expReportLineId'] = lineRecord.get('expReportLineId');
                    data['companyName'] = lineRecord.get('companyName');
                    data['companyId'] = lineRecord.get('companyId');
                    data['accEntityName'] = lineRecord.get('accEntityName');
                    data['accEntityId'] = lineRecord.get('accEntityId');
                    data['unitName'] = lineRecord.get('unitName');
                    data['unitId'] = lineRecord.get('unitId');
                    data['positionName'] = lineRecord.get('positionName');
                    data['positionId'] = lineRecord.get('positionId');
                    data['employeeName'] = lineRecord.get('employeeName');
                    data['employeeId'] = lineRecord.get('employeeId');
                    data['respCenterName'] = lineRecord.get('respCenterName');
                    data['respCenterId'] = lineRecord.get('respCenterId');
                    data['primaryQuantity'] = 1;
                    data['businessCurrencyName'] = lineRecord.get('businessCurrencyName');
                    data['businessCurrencyCode'] = lineRecord.get('businessCurrencyCode');
                    data['biz2payExchangeTypeName'] = lineRecord.get('biz2payExchangeTypeName');
                    data['biz2payExchangeType'] = lineRecord.get('biz2payExchangeType');
                    data['biz2payExchangeRate'] = lineRecord.get('biz2payExchangeRate');
                    data['paymentCurrencyName'] = lineRecord.get('paymentCurrencyName');
                    data['paymentCurrencyCode'] = lineRecord.get('paymentCurrencyCode');
                    data['pay2funExchangeTypeName'] = lineRecord.get('pay2funExchangeTypeName');
                    data['pay2funExchangeType'] = lineRecord.get('pay2funExchangeType');
                    data['pay2funExchangeRate'] = lineRecord.get('pay2funExchangeRate');
                    data['managementCurrencyName'] = lineRecord.get('managementCurrencyName');
                    data['managementCurrencyCode'] = lineRecord.get('managementCurrencyCode');
                    data['pay2magExchangeTypeName'] = lineRecord.get('pay2magExchangeTypeName');
                    data['pay2magExchangeType'] = lineRecord.get('pay2magExchangeType');
                    data['pay2magExchangeRate'] = lineRecord.get('pay2magExchangeRate');
                    data['bgtEntityId'] = lineRecord.get('bgtEntityId');
                    data['bgtEntityName'] = lineRecord.get('bgtEntityName');
                    data['bgtCenterId'] = lineRecord.get('bgtCenterId');
                    data['bgtCenterName'] = lineRecord.get('bgtCenterName');
                    data['periodName'] = lineRecord.get('periodName');
                    data['moExpenseTypeName'] = lineRecord.get('moExpenseTypeName');
                    data['moExpenseTypeId'] = lineRecord.get('moExpenseTypeId');
                    data['moExpenseItemName'] = lineRecord.get('moExpenseItemName');
                    data['moExpenseItemId'] = lineRecord.get('moExpenseItemId');
                    $au('EXP5110_exp_report_ticket_unified_dist_ds').create(data);
                }
            }
            
            // Modified by Arthur.Chen Date: 2017 - 09 - 18 15: 15: 12
            // 1.若报销单类型中必须申请字段为Y，那么修改新增按钮为复制按钮。下为复制按钮的function
            
            function EXP5110_ticket_unifiedLineCopy() {
                var selectedRecords = $au('EXP5110_exp_report_ticket_unified_line_ds').getSelected();
                if (selectedRecords && selectedRecords.length) {
                    Ext.each(selectedRecords, function(selectedRecord) {
                        var data = {};
                        for (var field in $au('EXP5110_exp_report_ticket_unified_line_ds').fields) {
                            data[field] = selectedRecord.get(field);
                        }
                        data['expReportLineId'] = null;
                        data['lineNumber'] = EXP5110_ticket_unifiedGetNextLineNumber();
                        $au('EXP5110_exp_report_ticket_unified_line_ds').create(data);
                    });
                } else {
                    new Aurora.showMessage('$[l:prompt]', '$[l:hap_must_select_one]', null, 300, 100);
                }
            }
            
            
            
            // Modify Tagin/2018.04.16 调整发票处理的逻辑（整理所有的函数）
            var EXP5110_ticketUnifiedInvoice = (function(record) {
                // 1.0 增值税发票字段必输/非必输
                this.required = function(value) {
                    if (value == 'VAT_SPECIAL') {
                        record.getField('invoiceCode').setRequired(true);
                        record.getField('invoiceNumber').setRequired(true);
                        record.getField('invoiceDate').setRequired(true);
                        record.getField('invoiceAmount').setRequired(true);
                        record.getField('taxTypeName').setRequired(true);
                        record.getField('taxAmount').setRequired(true); //发票金额
                        record.getField('splittedTaxAmount').setRequired(true); //发票金额
                    } else if (value == 'VAT_NORMAL' || value == 'VAT_ELECTRONIC_NORMAL') {
                        record.getField('invoiceCode').setRequired(true);
                        record.getField('invoiceNumber').setRequired(true);
                        record.getField('invoiceDate').setRequired(true);
                        record.getField('invoiceAmount').setRequired(true);
                    } else if (value == 'OTHER') {
                        //Modifiied by caoke/2018-05-30 其他发票也比输
                        // record.getField('invoiceCode').setRequired(false);
                        // record.getField('invoiceNumber').setRequired(false);
                        record.getField('invoiceCode').setRequired(true);
                        record.getField('invoiceNumber').setRequired(true);
                        record.getField('invoiceDate').setRequired(false);
                        record.getField('invoiceAmount').setRequired(true);
                        record.getField('taxTypeName').setRequired(false);
                        record.getField('taxAmount').setRequired(false); //发票金额
                        record.getField('splittedTaxAmount').setRequired(false); //发票金额
                    } else {
                        record.getField('invoiceCode').setRequired(false);
                        record.getField('invoiceNumber').setRequired(false);
                        record.getField('invoiceDate').setRequired(false);
                        record.getField('invoiceAmount').setRequired(false);
                        record.getField('taxTypeName').setRequired(false);
                        record.getField('taxAmount').setRequired(false); //发票金额
                        record.getField('splittedTaxAmount').setRequired(false); //发票金额
                    }
                };
            
                // 2.0 增值税发票字段清空
                this.clear = function(value) {
                    if (value == 'VAT_SPECIAL') {
                        //
                    } else if (value == 'VAT_NORMAL' || value == 'VAT_ELECTRONIC_NORMAL') {
                        record.set('taxTypeName', '');
                        record.set('taxTypeId', '');
                        record.set('taxTypeRate', '');
                        record.set('relationFlag', '');
                    } else if (value == 'OTHER') {
                        //record.set('invoiceCode', '');
                        //Modiied by caoke/2018-06-04 其他类型发票，可以有发票税等信息
                        // record.set('invoiceNumber', '');
                        // record.set('invoiceDate', '');
                        // record.set('invoiceAmount', '');
                        // record.set('taxTypeName', '');
                        // record.set('taxTypeId', '');
                        // record.set('taxTypeRate', '');
                        // record.set('taxAmount', '');
                        // record.set('splittedTaxAmount', '');
                        // record.set('relationFlag', '');
                    } else if (value == '' || value == undefined) {
                        record.set('invoiceId', '');
                        record.set('invoiceLineId', '');
                        // record.set('invoiceCategoryName', '');
                        // record.set('invoiceCategoryId', '');
                        record.set('invoiceCode', '');
                        record.set('invoiceNumber', '');
                        record.set('invoiceDate', '');
                        record.set('invoiceAmount', '');
                        record.set('taxTypeName', '');
                        record.set('taxTypeId', '');
                        record.set('taxTypeRate', '');
                        record.set('taxAmount', '');
                        record.set('splittedTaxAmount', '');
                        record.set('invoiceType', '');
                        record.set('invoiceSource', '');
                        record.set('relationFlag', '');
                    }
                };
            
                // 3.0 增值税发票相关字段显示/隐藏
                this.show = function(value, grid) {
                    if (value == 'Y') {
                        // Modify Tagin/2018.01.22 增加判断 若页面元素中更多发票/更多税额标识存在为Y则启用更多关联链接
                        if ('$[/model/ticket_unified_line_element/record/@moreInvoiceFlag]' == 'Y' || '$[/model/ticket_unified_line_element/record/@moreTaxFlag]' == 'Y') {
                            grid.showColumn('invoiceInfo');
                        } else {
                            grid.hideColumn('invoiceInfo');
                        }
                        if ('$/model/ticket_unified_line_element/record/@invoiceFlag]' == 'N') {
                            grid.hideColumn('invoiceCategoryName');
                            grid.hideColumn('invoiceCode');
                            grid.hideColumn('invoiceNumber');
                            grid.hideColumn('invoiceDate');
                            grid.hideColumn('invoiceAmount');
                            grid.hideColumn('cancelInvoice');
                        } else {
                            grid.showColumn('invoiceCategoryName');
                            grid.showColumn('invoiceCode');
                            grid.showColumn('invoiceNumber');
                            grid.showColumn('invoiceDate');
                            grid.showColumn('invoiceAmount');
                            grid.showColumn('cancelInvoice');
                        }
                        if ('$[/model/ticket_unified_line_element/record/@taxFlag]' == 'N') {
                            grid.hideColumn('taxTypeName');
                            grid.hideColumn('taxAmount');
                            grid.hideColumn('splittedTaxAmount');
                        } else {
                            grid.showColumn('taxTypeName');
                            grid.showColumn('taxAmount');
                            grid.showColumn('splittedTaxAmount');
                        }
                    } else {
                        grid.hideColumn('invoiceInfo');
                        grid.hideColumn('invoiceCategoryName');
                        grid.hideColumn('invoiceCode');
                        grid.hideColumn('invoiceNumber');
                        grid.hideColumn('invoiceDate');
                        grid.hideColumn('invoiceAmount');
                        grid.hideColumn('taxTypeName');
                        grid.hideColumn('taxAmount');
                        grid.hideColumn('splittedTaxAmount');
                        grid.hideColumn('cancelInvoice');
                    }
                    //add by caoke/2018-05-02 报销单头关联申请单，隐藏行上的关联申请单号
                    if ($au('EXP5110_exp_report_header_ds').getAt(0).get('relationMethodCode') == 'HEAD') {
                        grid.hideColumn('expRequisitionNumber');
                    }
                };
            
                // 4.0 增值税发票相关字段是否可输入
                this.edit = function(name) {
                    var invoiceRow = !record.get('vatcount') ? 0 : record.get('vatcount');
                    var invoiceSource = record.get('invoiceSource');
                    var invoiceType = record.get('invoiceType');
                    if (name == 'invoiceCategoryName') {
                        // add caoke/2018.05-30 设置增值税相关字段的必输性
                        if (record.get('invoiceSource') == 'MANUAL' && invoiceRow <= 1) {
                            new EXP5110_ticketUnifiedInvoice(record).required(invoiceType);
                        }
            
                        //end
                        if (invoiceRow <= 1) {
                            return 'EXP5110_ticket_unified_cb';
                        }
                    } else if (name == 'invoiceCode') {
                        if (invoiceRow <= 1 && record.get('invoiceCategoryName')) {
                            return 'EXP5110_ticket_unified_lov';
                        }
                    } else if (name == 'invoiceNumber') {
                        if (invoiceRow <= 1 && invoiceSource == 'MANUAL') {
                            return 'EXP5110_ticket_unified_tf';
                        }
                    } else if (name == 'invoiceDate') {
                        if (invoiceRow <= 1 && invoiceSource == 'MANUAL') {
                            return 'EXP5110_ticket_unified_dp';
                        }
                    } else if (name == 'invoiceAmount') {
                        if (invoiceRow <= 1 && invoiceSource == 'MANUAL') {
                            return 'EXP5110_ticket_unified_nf_2';
                        }
                    } else if (name == 'taxTypeName') {
                        // Modify Tagin/2018.04.17 存在只录税率及税额（只拆分税金不关联发票）
                        if ((invoiceRow <= 1 && invoiceSource == 'MANUAL') || (!record.get('invoiceCode') && invoiceRow <= 1)) {
                            return 'EXP5110_ticket_unified_cb';
                        }
                    } else if (name == 'taxAmount') {
                        // Modify Tagin/2018.04.17 存在只录税率及税额（只拆分税金不关联发票）
                        if ((invoiceRow <= 1 && invoiceSource == 'MANUAL') || (!record.get('invoiceCode') && invoiceRow <= 1)) {
                            //add by caoke/2018-05-30 设置比输
                            if (record.get('taxTypeRate')) {
                                record.getField('taxAmount').setRequired(true);
                            } else {
                                record.getField('taxAmount').setRequired(false);
                            }
                            return 'EXP5110_ticket_unified_nf_2';
                        }
                    } else if (name == 'splittedTaxAmount') {
                        // Modify Tagin/2018.04.17 存在只录税率及税额（只拆分税金不关联发票）
                        if ((invoiceRow <= 1 && invoiceSource == 'MANUAL') || (!record.get('invoiceCode') && invoiceRow <= 1)) {
                            return 'EXP5110_ticket_unified_nf_2';
                        }
                    }
                    return '';
                };
            
                // 5.0 增值税发票取消关联
                this.cancel = function(headerId, lineId, dataSet) {
                    if (headerId && lineId) {
                        Aurora.request({
                            url: $au('EXP5110_exp_report_ticket_unified_cancel_report_realation_link').getUrl(),
                            para: {
                                expReportHeaderId: headerId,
                                expReportLineId: lineId
                            },
                            success: function(resp) {
                                dataSet.query();
                            }
                        });
                    }
                };
            });
            
            function EXPT5110_onTicketUnifiedLineUpdateFun(ds, record, name, value, oldValue) {
                var index = ds.indexOf(record);
                var hecUtil = new HecUtil();
                if (name == 'companyId') {
                    //公司变更清除部门、岗位、员工
                    record.set('unitName', '');
                    record.set('unitId', '');
                    record.set('positionName', '');
                    record.set('positionId', '');
                    //添加公司变更清除地点和地点类型   Y.duan 2017-8-14 17:12:09
                    record.set('placeTypeName', '');
                    record.set('placeTypeId', '');
                    record.set('placeId', '');
                    record.set('placeName', '');
                } else if (name == 'accEntityId') {
                    //核算实体边更清除责任中心
                    record.set('respCenterName', '');
                    record.set('respCenterId', '');
                } else if (name == 'primaryQuantity') {
                    record.set('businessAmount', hecUtil.calAmount(record.get('businessPrice'), record.get('primaryQuantity'), record.get('businessCurrencyPrecision')));
                    record.set('paymentAmount', hecUtil.calAmount(mul(record.get('businessPrice'), record.get('biz2payExchangeRate')), record.get('primaryQuantity'), record.get('paymentCurrencyPrecision')));
                    record.set('managementAmount', hecUtil.calAmount(mul(mul(record.get('businessPrice'), record.get('biz2payExchangeRate')), record.get('pay2magExchangeRate')), record.get('primaryQuantity'), record.get('managementCurrencyPrecision')));
                    record.set('reportFunctionalAmount', hecUtil.calExchangeAmount(mul(mul(record.get('businessPrice'), record.get('biz2payExchangeRate')), record.get('primaryQuantity')), record.get('pay2magExchangeRate')), record.get('pay2funExchangeRate'), record.get('functionalCurrencyPrecision'));
                } else if (name == 'businessPrice') {
                    record.set('businessAmount', hecUtil.calAmount(record.get('businessPrice'), record.get('primaryQuantity'), record.get('businessCurrencyPrecision')));
                    record.set('paymentPrice', hecUtil.calExchangeAmount(record.get('businessPrice'), record.get('biz2payExchangeRate'), record.get('paymentCurrencyPrecision')));
                    record.set('paymentAmount', hecUtil.calAmount(mul(record.get('businessPrice'), record.get('biz2payExchangeRate')), record.get('primaryQuantity'), record.get('paymentCurrencyPrecision')));
                    record.set('managementPrice', hecUtil.calExchangeAmount(mul(record.get('businessPrice'), record.get('biz2payExchangeRate')), record.get('pay2magExchangeRate'), record.get('managementCurrencyPrecision')));
                    record.set('managementAmount', hecUtil.calAmount(mul(mul(record.get('businessPrice'), record.get('biz2payExchangeRate')), record.get('pay2magExchangeRate')), record.get('primaryQuantity'), record.get('managementCurrencyPrecision')));
                    record.set('reportFunctionalAmount', hecUtil.calExchangeAmount(mul(mul(record.get('businessPrice'), record.get('biz2payExchangeRate')), record.get('primaryQuantity')), record.get('pay2magExchangeRate')), record.get('pay2funExchangeRate'), record.get('functionalCurrencyPrecision'));
                } else if (name == 'pay2funExchangeRate') {
                    record.set('reportFunctionalAmount', hecUtil.calExchangeAmount(record.get('businessAmount') * record.get('biz2payExchangeRate'), record.get('pay2funExchangeRate'), record.get('functionalCurrencyPrecision')));
                    // } else if (name == 'primaryQuantity') {
                    // record.set('businessAmount', hecUtil.calAmount(record.get('businessPrice'), record.get('primaryQuantity'), record.get('businessCurrencyPrecision')));
                    // record.set('paymentAmount', hecUtil.calAmount(record.get('paymentPrice'), record.get('primaryQuantity'), record.get('paymentCurrencyPrecision')));
                    // record.set('managementAmount', hecUtil.calAmount(record.get('managementPrice'), record.get('primaryQuantity'), record.get('managementCurrencyPrecision')));
                    // record.set('reportFunctionalAmount', hecUtil.calExchangeAmount(record.get('paymentAmount'), record.get('pay2funExchangeRate'), record.get('functionalCurrencyPrecision')));
                    // } else if (name == 'businessPrice') {
                    // record.set('businessAmount', hecUtil.calAmount(record.get('businessPrice'), record.get('primaryQuantity'), record.get('businessCurrencyPrecision')));
                    // record.set('paymentPrice', hecUtil.calExchangeAmount(record.get('businessPrice'), record.get('biz2payExchangeRate'), record.get('paymentCurrencyPrecision')));
                    // } else if (name == 'paymentPrice') {
                    // record.set('paymentAmount', hecUtil.calAmount(record.get('paymentPrice'), record.get('primaryQuantity'), record.get('paymentCurrencyPrecision')));
                    // record.set('managementPrice', hecUtil.calExchangeAmount(record.get('paymentPrice'), record.get('pay2magExchangeRate'), record.get('managementCurrencyPrecision')));
                    // } else if (name == 'managementPrice') {
                    // record.set('managementAmount', hecUtil.calAmount(record.get('managementPrice'), record.get('primaryQuantity'), record.get('managementCurrencyPrecision')));
                    // } else if (name == 'paymentAmount') {
                    // record.set('reportFunctionalAmount', hecUtil.calExchangeAmount(record.get('paymentAmount'), record.get('pay2funExchangeRate'), record.get('functionalCurrencyPrecision')));
                    // } else if (name == 'biz2payExchangeRate') {
                    // // Modify Tagin/2018.05.08 当业务币种-支付币种 汇率变化时调整支付单价
                    // record.set('paymentPrice', hecUtil.calExchangeAmount(record.get('businessPrice'), value, record.get('paymentCurrencyPrecision')));
                    // } else if (name == 'biz2payExchangeRate') {
                    // // Modify Tagin/2018.05.08 当支付币种-本位币 汇率变化时调整本位币金额
                    // record.set('reportFunctionalAmount', hecUtil.calExchangeAmount(record.get('paymentAmount'), value, record.get('functionalCurrencyPrecision')));
                } else if (name == 'moExpenseTypeId') {
                    record.set('moExpenseItemName', '');
                    record.set('moExpenseItemId', '');
                } else if (name == 'moExpenseItemId') {
                    record.set('budgetItemId', '');
                    record.set('budgetItemName', '');
                } else if (name == 'businessCurrencyCode') {
                    // Modify Tagin/2018.04.02 增加业务币种-支付币种、支付币种-本位币获取汇率逻辑
                    var dataSet = $au('EXP5110_ticketUnifiedDocExchangeRate_ds');
                    dataSet.setQueryParameter('accEntityId', record.get('accEntityId'));
                    dataSet.setQueryParameter('businessCurrencyCode', record.get('businessCurrencyCode'));
                    dataSet.setQueryParameter('paymentCurrencyCode', record.get('paymentCurrencyCode'));
                    dataSet.query();
            
                } else if (name == 'invoiceCategoryId') {
                    //add by caoke/2018-05-30 取消关联
                    if (record.get('invoiceId')) {
                        EXP5110_ticketUnifiedCancelLineRefInvoice(index);
                    } else {
                        new EXP5110_ticketUnifiedInvoice(record).clear(null);
                    }
                } else if (name == 'taxAmount') {
                    //税金更新后，自动调整拆分税金金额。同时设置manualSplittedTaxFlag为N
                    record.set('splittedTaxAmount', record.get('taxAmount'));
                    record.set('reportAmount', record.get('taxAmount'));
                    record.set('manualSplittedTaxFlag', 'N');
                } else if (name == 'splittedTaxAmount') {
                    //拆分税金更新后，设置manualSplittedTaxFlag
                    record.set('manualSplittedTaxFlag', 'Y');
                } else if (name == 'invoiceCode') {
                    // Modify Tagin/2018.04.10 根据发票代码获取发票类型
                    var dataSet = $au('EXP5110_ticketUnifiedInvoiceTypeDs');
            
                    dataSet.setQueryParameter('invoiceCode', value);
                    dataSet.query();
                } else if (name == 'invoiceType') {
                    if (record.get('invoiceSource') == 'MANUAL') {
                        // Modify Tagin/2018.04.16 设置增值税发票清空逻辑
                        new EXP5110_ticketUnifiedInvoice(record).clear(value);
                        // Modify Tagin/2018.04.16 设置增值税相关字段的必输性
                        new EXP5110_ticketUnifiedInvoice(record).required(value);
                    }
                } else if (name == 'invoiceAmount') {
                    // Modify Tagin/2018.05.22 发票价税合计变更时自动计算税额/实际报销金额
                    if (record.get('invoiceSource') == 'MANUAL') {
                        if (record.get('taxTypeRate') && value) {
                            //Modified by caoke/2018-05-30 计算价内税和价外税
                            // record.set('taxAmount', hecUtil.calAmount(mul(record.get('taxTypeRate'), value), 1, record.get('businessCurrencyPrecision')));
                            if (record.get('autoCalculationFlag') == 'Y') {
                                record.set('taxAmount', hecUtil.calTaxAmount(record.get('invoiceAmount'), record.get('taxTypeRate'), record.get('taxCategory'), record.get('businessCurrencyPrecision')));
                            } else {
                                record.set('taxAmount', '');
                            }
                        }
                        record.set('reportAmount', record.get('taxAmount') ? record.get('taxAmount') : value);
                    }
                } else if (name == 'taxTypeRate') {
                    // Modify Tagin/2018.05.22 发票税率变更时自动计算税额/实际报销金额
                    if (record.get('invoiceSource') == 'MANUAL') {
                        if (record.get('invoiceAmount') && value) {
                            //价税合计金额算税额方案为 ： 金额  * (税率 / (1 + 税率))
                            //Modified by caoke/2018-05-30 计算价内税和价外税
                            // record.set('taxAmount', hecUtil.calAmount(mul(value, record.get('invoiceAmount')), 1, record.get('businessCurrencyPrecision')));
                            if (record.get('autoCalculationFlag') == 'Y') {
                                record.set('taxAmount', hecUtil.calTaxAmount(record.get('invoiceAmount'), record.get('taxTypeRate'), record.get('taxCategory'), record.get('businessCurrencyPrecision')));
                            } else {
                                record.set('taxAmount', '');
                            }
                        }
                        record.set('reportAmount', record.get('taxAmount') ? record.get('taxAmount') : record.get('invoiceAmount'));
                    }
                }
            
            
                //数据变更获取费用政策
                if (name == 'companyId' || name == 'employeeId' || name == 'moExpenseItemId' || name == 'placeTypeId' || name == 'placeId' || name == 'businessCurrencyCode' || name == 'unitId' || name == 'accEntityId' || name == 'positionId') {
                    // 调用头页面元素的JS,动态获取并处理当前行费用政策相关数据,在行数据更新、新增的时候触发。
                    EXP5110_onLinePolicyInit(record, name);
                }
            
                //头金额变更
                if (name == 'businessAmount') {
                    EXP5110_onHeadAmountChanged();
                }
                if (/dimension/.test(name)) {
                    // Modify Tagin/2018.01.22 增加维度设置查询条件
                    var level = record.get('companylevel');
                    if (level == 'BUDGET') {
                        id = record.get('bgtEntityId');
                    } else if (level == 'ACCOUNTING') {
                        id = record.get('accEntityId');
                    } else if (level == 'MANAGEMENT') {
                        id = '$[/session/@companyId]';
                    }
                    record.getField(name).setLovPara('companyId', id);
                }
            }
            
            function EXPT5110_onticket_unifiedDistUpdateFun(ds, record, name, value, oldValue) {
                var hecUtil = new HecUtil();
                if (name == 'primaryQuantity') {
                    record.set('businessAmount', hecUtil.calAmount(record.get('businessPrice'), record.get('primaryQuantity'), record.get('businessCurrencyPrecision')));
                    record.set('paymentAmount', hecUtil.calAmount(mul(record.get('businessPrice'), record.get('biz2payExchangeRate')), record.get('primaryQuantity'), record.get('paymentCurrencyPrecision')));
                    record.set('managementAmount', hecUtil.calAmount(mul(mul(record.get('businessPrice'), record.get('biz2payExchangeRate')), record.get('pay2magExchangeRate')), record.get('primaryQuantity'), record.get('managementCurrencyPrecision')));
                    record.set('reportFunctionalAmount', hecUtil.calExchangeAmount(mul(mul(record.get('businessPrice'), record.get('biz2payExchangeRate')), record.get('primaryQuantity')), record.get('pay2magExchangeRate')), record.get('pay2funExchangeRate'), record.get('functionalCurrencyPrecision'));
                } else if (name == 'businessPrice') {
                    record.set('businessAmount', hecUtil.calAmount(record.get('businessPrice'), record.get('primaryQuantity'), record.get('businessCurrencyPrecision')));
                    record.set('paymentPrice', hecUtil.calExchangeAmount(record.get('businessPrice'), record.get('biz2payExchangeRate'), record.get('paymentCurrencyPrecision')));
                    record.set('paymentAmount', hecUtil.calAmount(mul(record.get('businessPrice'), record.get('biz2payExchangeRate')), record.get('primaryQuantity'), record.get('paymentCurrencyPrecision')));
                    record.set('managementPrice', hecUtil.calExchangeAmount(mul(record.get('businessPrice'), record.get('biz2payExchangeRate')), record.get('pay2magExchangeRate'), record.get('managementCurrencyPrecision')));
                    record.set('managementAmount', hecUtil.calAmount(mul(mul(record.get('businessPrice'), record.get('biz2payExchangeRate')), record.get('pay2magExchangeRate')), record.get('primaryQuantity'), record.get('managementCurrencyPrecision')));
                    record.set('reportFunctionalAmount', hecUtil.calExchangeAmount(mul(mul(record.get('businessPrice'), record.get('biz2payExchangeRate')), record.get('primaryQuantity')), record.get('pay2magExchangeRate')), record.get('pay2funExchangeRate'), record.get('functionalCurrencyPrecision'));
                } else if (name == 'pay2funExchangeRate') {
                    record.set('reportFunctionalAmount', hecUtil.calExchangeAmount(record.get('businessAmount') * record.get('biz2payExchangeRate'), record.get('pay2funExchangeRate'), record.get('functionalCurrencyPrecision')));
                    // if (name == 'primaryQuantity') {
                    // record.set('businessAmount', hecUtil.calAmount(record.get('businessPrice'), record.get('primaryQuantity'), record.get('businessCurrencyPrecision')));
                    // record.set('paymentAmount', hecUtil.calAmount(record.get('paymentPrice'), record.get('primaryQuantity'), record.get('paymentCurrencyPrecision')));
                    // record.set('managementAmount', hecUtil.calAmount(record.get('managementPrice'), record.get('primaryQuantity'), record.get('managementCurrencyPrecision')));
                    // record.set('reportFunctionalAmount', hecUtil.calExchangeAmount(record.get('paymentAmount'), record.get('pay2funExchangeRate'), record.get('functionalCurrencyPrecision')));
                    // } else if (name == 'businessPrice') {
                    // record.set('businessAmount', hecUtil.calAmount(record.get('businessPrice'), record.get('primaryQuantity'), record.get('businessCurrencyPrecision')));
                    // record.set('paymentPrice', hecUtil.calExchangeAmount(record.get('businessPrice'), record.get('biz2payExchangeRate'), record.get('paymentCurrencyPrecision')));
                    // } else if (name == 'paymentPrice') {
                    // record.set('paymentAmount', hecUtil.calAmount(record.get('paymentPrice'), record.get('primaryQuantity'), record.get('paymentCurrencyPrecision')));
                    // record.set('managementPrice', hecUtil.calExchangeAmount(record.get('paymentPrice'), record.get('pay2magExchangeRate'), record.get('managementCurrencyPrecision')));
                    // } else if (name == 'managementPrice') {
                    // record.set('managementAmount', hecUtil.calAmount(record.get('managementPrice'), record.get('primaryQuantity'), record.get('managementCurrencyPrecision')));
                    // } else if (name == 'paymentAmount') {
                    // record.set('reportFunctionalAmount', hecUtil.calExchangeAmount(record.get('paymentAmount'), record.get('pay2funExchangeRate'), record.get('functionalCurrencyPrecision')));
                } else if (name == 'taxAmount') {
                    //税金更新后，自动调整拆分税金金额。同时设置manualSplittedTaxFlag为N
                    record.set('splittedTaxAmount', record.get('taxAmount'));
                    record.set('manualSplittedTaxFlag', 'N');
                } else if (name == 'splittedTaxAmount') {
                    //拆分税金更新后，设置manualSplittedTaxFlag
                    record.set('manualSplittedTaxFlag', 'Y');
                }
            
                //发票税率变更或者发票金额变更的时候，自动计算税金金额
                if (name == 'taxTypeRate' || name == 'invoiceAmount') {
                    var taxTypeRate = record.get('taxTypeRate');
                    var invoiceAmount = record.get('invoiceAmount');
                    if (!isNaN(taxTypeRate) && !isNaN(invoiceAmount)) {
                        record.set('taxAmount', hecUtil.calAmount(mul(div(taxTypeRate, plus(1, taxTypeRate)), invoiceAmount), 1, record.get('businessCurrencyPrecision')));
                    }
                }
            }
            
            function EXPT5110_onTicketUnifiedLineLoadFun(dataSet) {
                var records = dataSet.getAll();
                for (var i = 0;i < records.length;i++) {
                    var headerRecord = $au('EXP5110_exp_report_header_ds').getAt(0);
                    if (headerRecord.get('vatInvoiceFlag') != 'Y') {
                        records[i].getMeta().getField('lineInvoiceTypeDesc').setRequired(false);
                    } else {
                        records[i].getMeta().getField('lineInvoiceTypeDesc').setRequired(false);
                    }
                }
            }
            
            function EXP5110_onticket_unifiedLineCellClickFun(grid, row, name, record) {
                if (name == 'unitName') {
                    record.getField('unitName').setLovPara('companyId', record.get('companyId'));
                    // 新增核算主体Id查询条件 caoke 2018-1-25 14:38:04
                    record.getField('unitName').setLovPara('accEntityId', record.get('accEntityId'));
                } else if (name == 'positionName') {
                    record.getField('positionName').setLovPara('companyId', record.get('companyId'));
                    record.getField('positionName').setLovPara('employeeId', record.get('employeeId'));
                } else if (name == 'employeeName') {
                    record.getField('employeeName').setLovPara('companyId', record.get('companyId'));
                    //新增核算主体查询条件
                    record.getField('employeeName').setLovPara('accEntityId', record.get('accEntityId'));
                } else if (name == 'accEntityName') {
                    record.getField('accEntityName').setLovPara('companyId', record.get('companyId'));
                } else if (name == 'respCenterName') {
                    record.getField('respCenterName').setLovPara('accEntityId', record.get('accEntityId'));
                    record.getField('respCenterName').setLovPara('summaryFlag', 'N');
                    //add by caoke/20180-01-25 增加部门限制				
                    record.getField('respCenterName').setLovPara('unitId', record.get('unitId'));
                } else if (name == 'placeName') {
                    record.getField('placeName').setLovPara('companyId', record.get('companyId'));
                } else if (name == 'moExpenseTypeName') {
                    $au('EXP5110_ticket_unified_expense_type_ds').setQueryParameter('companyId', record.get('companyId'));
                    $au('EXP5110_ticket_unified_expense_type_ds').query();
                } else if (name == 'moExpenseItemName') {
                    /*Modified by Arthur.Chen Date:2017-09-20 19:42:31
                     1.动态获取moExpenseItemName字段的options
                     */
                    $au('EXP5110_ticket_unified_items_ds').setQueryParameter('moExpenseTypeId', record.get('moExpenseTypeId'));
                    $au('EXP5110_ticket_unified_items_ds').setQueryParameter('companyId', record.get('companyId'));
                    $au('EXP5110_ticket_unified_items_ds').setQueryParameter('moExpReportTypeId', '$[/model/header_info/record/@moExpReportTypeId]');
                    $au('EXP5110_ticket_unified_items_ds').setQueryParameter('pageElementCode', 'TICKET_UNIFIED');
                    $au('EXP5110_ticket_unified_items_ds').query();
                } else if (name == 'moExpenseTypeName') {
                    $au('EXP5110_ticket_unified_expense_type_ds').setQueryParameter('companyId', record.get('companyId'));
                } else if (name == 'invoiceCode') {
                    // Modify Tagin/2018.04.28 设置LovUrl及参数
                    record.getField(name).setLovPara('sourceDataset', 'EXP5110_exp_report_ticket_unified_line_ds');
                    record.getField(name).setLovPara('sourceLineDataset', 'EXP5110_ticketUnifiedInvoiceLineDs');
                    record.getField(name).setLovPara('relationId', record.get('relationId') || '');
                    record.getField(name).setLovPara('invoiceId', record.get('invoiceId') || '');
                    record.getField(name).setLovPara('invoiceCategoryId', record.get('invoiceCategoryId') || '');
                    record.getField(name).setLovPara('invoiceCode', record.get('invoiceCode') || '');
                    record.getField(name).setLovPara('invoiceNumber', record.get('invoiceNumber') || '');
                    record.getField(name).setLovPara('invoiceDate', record.get('invoiceDate') || '');
                    record.getField(name).setLovPara('amount', record.get('amount') || '');
                    record.getField(name).setLovPara('taxAmount', record.get('taxAmount') || '');
                    record.getField(name).setLovPara('expReportLineId', record.get('expReportLineId') || '');
                    record.getField(name).setLovWidth(parseInt(Aurora.getCookie('vw')) + 20);
                    record.getField(name).setLovHeight(parseInt(Aurora.getCookie('vh')));
                    record.getField(name).setTitle('$[l:invoice_select]');
                }
                if (/dimension/.test(name)) { // 设置维度查询条件【Tips：若涉及多维度则需要判断维度对应的级别，不同级别对应的组织架构不同】
                    var id = '';
                    var fieldName = name.replace('name', 'level');
                    var level = record.get(fieldName);
                    if (level == 'BUDGET') {
                        id = record.get('bgtEntityId');
                    } else if (level == 'ACCOUNTING') {
                        id = record.get('accEntityId');
                    } else if (level == 'MANAGEMENT') {
                        id = '$[/session/@companyId]';
                    }
                    record.getField(name).setLovPara('companyId', id);
                }
            }
            
            function EXP5110_ticket_unifiedBizPriceEditorFun(record, name) {
                if (name == 'businessPrice') {
                    if (record.get('changeableFlag') == 'N') {
                        return '';
                    } else {
                        var precision = record.get('businessCurrencyPrecision');
                        if (!precision) {
                            return 'EXP5110_ticket_unified_nf_2';
                        } else {
                            return 'EXP5110_ticket_unified_nf_' + precision;
                        }
                    }
                }
            }
            
            function EXP5110_ticket_unifiedDateValidator(record, name, value) {
                if (record.get('dateFrom') && record.get('dateTo')) {
                    if (record.get('dateFrom') > record.get('dateTo')) {
                        return '$[l:start_date_not_later_ending_date]';
                    }
                }
                return true;
            }
            
            function EXP5110_ticket_unifiedLineBeforeSubmit() {
                var ticket_unifiedLineDs = $au('EXP5110_exp_report_ticket_unified_line_ds');
                if (!ticket_unifiedLineDs.validate()) {
                    return false;
                } else {
                    var records = ticket_unifiedLineDs.getAll();
                    for (var i = 0;i < records.length;i++) {
                        var expObjDatas = [];
                        for (field in ticket_unifiedLineDs.fields) {
                            if (/^#/.test(field)) {
                                //id字段
                                var expObjTypeId = field.replace(/^#/, '');
                                var idValue = records[i].get(field);
                                var nameValue = records[i].get('^' + field);
                                var expObjData = {
                                    moExpObjTypeId: expObjTypeId,
                                    moExpenseObjectId: idValue,
                                    moExpenseObjectName: nameValue
                                };
                                expObjDatas.push(expObjData);
                            }
                        }
                        records[i]['data']['expenseObjectLines'] = expObjDatas;
                    }
                }
            }
            
            
            
            function EXP5110_ticket_unifiedCreateFromReq() {
                var headerRecord = $au('EXP5110_exp_report_header_ds').getAt(0);
                var vExpReportHeaderId = headerRecord.get('expReportHeaderId');
                //add lcy 2018/5/11 13:33:34 怎加是否为统购标识
                var monopolizeFlag = 'Y';
                new Aurora.Window({
                    url: $au('EXP5110_exp_report_maintain_create_from_req_link').getUrl() + '?moExpReportTypeId=$[/model/header_info/record/@moExpReportTypeId]&reportPageElementCode=TICKET_UNIFIED&paymentCurrencyCode=' + $au('EXP5110_exp_report_header_ds').getAt(0).get('paymentCurrencyCode') + '&monopolizeFlag=' + monopolizeFlag,
                    id: 'EXP5110_exp_report_ticket_unified_for_req_window',
                    title: '$[l:exp_report_create.fromreq]',
                    fullScreen: true
                });
            }
            
            function EXP5110_ticket_unifiedLineInitVatColumn() {
                var headerRd = $au('EXP5110_exp_report_header_ds').getAt(0);
                var lineGrid = $au('EXP5110_ticket_unified_lines_grid');
                // Modify Tagin/2018.04.16 调用增值税发票行信息显示方法
                new EXP5110_ticketUnifiedInvoice().show(headerRd.get('vatInvoiceFlag'), lineGrid);
                //add by caoke/2018-05-02 报销单头关联申请单，隐藏行上的关联申请单号
                if ($au('EXP5110_exp_report_header_ds').getAt(0).get('relationMethodCode') == 'HEAD') {
                    $au('EXP5110_ticket_unified_lines_grid').hideColumn('expRequisitionNumber');
                }
            }
            
            function EXP5110_ticket_unifiedLineOnHeaderUpdate(ds, record, name, value, oldValue) {
                // Modify Tagin/2018.04.16 单据头发票信息变更时，调用增值税发票行信息显示方法
                if (name == 'vatInvoiceFlag') {
                    new EXP5110_ticketUnifiedInvoice().show(value, $au('EXP5110_ticket_unified_lines_grid'));
                }
            }
            
            function EXP5110_ticket_unifiedLineInvoiceInfoRenderer(value, record, name) {
                var vatCount = !record.get('vatcount') ? 0 : record.get('vatcount');
                var taxCount = !record.get('taxcount') ? 0 : record.get('taxcount');
                var index = $au('EXP5110_exp_report_ticket_unified_line_ds').indexOf(record);
                var vatContent = '';
                var taxContent = '';
                if ('$[/model/ticket_unified_line_element/record/@moreInvoiceFlag]' == 'Y') {
                    if (vatCount <= 1) {
                        if (!record.isNew) {
                            vatContent = '<a href="javascript:EXP5110_openTicketUnifiedLineMoreInvoiceWindow(\'' + index + '\')">$[l:exp_mo_req_types.invoice_flag]</a>';
                        }
                    } else {
                        vatContent = '<a href="javascript:EXP5110_openTicketUnifiedLineMoreInvoiceWindow(\'' + index + '\')"><font color="green">$[l:exp_mo_req_types.invoice_flag]</font></a>';
                    }
                }
                if ('$[/model/ticket_unified_line_element/record/@moreTaxFlag]' == 'Y') {
                    if (record.get('relationId')) { // Modify Tagin/2018.05.22 若不存在发票关联ID，则为关联多个发票税额不显示【进入更多发票查看税额】
                        if (taxCount <= 1) {
                            if (!record.isNew) {
                                taxContent = '<a href="javascript:EXP5110_ticketUnifiedLineMoreTaxFunc(' + index + ')">$[l:vat_invoice_lines.tax_rate]</a>';
                            }
                        } else {
                            taxContent = '<a href="javascript:EXP5110_ticketUnifiedLineMoreTaxFunc(' + index + ')"><font color="green">$[l:vat_invoice_lines.tax_rate]</font></a>';
                        }
                    }
                }
                return !vatContent ? (!taxContent ? '' : taxContent) : (!taxContent ? vatContent : vatContent + ' / ' + taxContent);
            }
            
            function EXP5110_openTicketUnifiedLineMoreInvoiceWindow(index) {
                var record = $au('EXP5110_exp_report_ticket_unified_line_ds').getAt(index);
                var headerId = record.get('expReportHeaderId') || '';
                var lineId = record.get('expReportLineId') || '';
                var distId = record.get('expReportDistId') || '';
                new Aurora.Window({
                    url: $au('EXP5110_exp_report_ticket_unified_more_invoice_standard_link').getUrl() + '?expReportHeaderId=' + headerId + '&expReportLineId=' + lineId + '&expReportDistId=' + distId + '&sourceDataset=' + 'EXP5110_exp_report_ticket_unified_line_ds',
                    id: 'EXP5110_exp_report_ticket_unified_more_invoice_standard_window',
                    title: '$[l:more_invoice]',
                    side: 'right',
                    width: 1020
                }).on('close', function() {
                    $au('EXP5110_exp_report_ticket_unified_line_ds').query();
                });
            }
            
            function EXP5110_ticketUnifiedLineMoreTaxFunc(index) {
                var record = $au('EXP5110_exp_report_ticket_unified_line_ds').getAt(index);
                var invoiceLineId = record.get('invoiceLineId') || '';
                var invoiceId = record.get('invoiceId') || '';
                var relationId = record.get('relationId') || '';
                var lineId = record.get('expReportLineId') || '';
                new Aurora.Window({
                    id: 'EXP5110_exp_report_ticket_unified_vat_invoice_more_tax_window',
                    url: $au('EXP5110_exp_report_ticket_unified_vat_invoice_more_tax_link').getUrl() + '?invoiceLineId=' + invoiceLineId + '&invoiceId=' + invoiceId + '&relationId=' + relationId + '&expReportLineId=' + lineId,
                    side: 'right',
                    width: 1020
                }).on('close', function() {
                    $au('EXP5110_exp_report_ticket_unified_line_ds').query();
                });
            }
            
            function EXP5110_invoiceItemValidator(record, name, value) {
                if (record.get('invoiceLineId') && !value) {
                    //发票项目允许为空，财务人员在审核时选择
                    //return '发票项目必输!';
                }
                return true;
            }
            
            function EXP5110_invoiceUsedeValidator(record, name, value) {
                if (record.get('invoiceLineId') && !value) {
                    //发票用途允许为空，财务人员在审核时选择
                    //return '发票用途必输!';
                }
                return true;
            }
            
            function EXP5110_ticketUnifiedMoreRenderer(value, record, name) {
                if (name == 'more' && record.get('expReportLineId')) {
                    var content = '>>';
                    return '<a href="javascript:EXP5110_openticket_unifiedMoreWindow(\'' + record.get('expReportLineId') + '\')">' + content + '</a>';
                }
            }
            
            function EXP5110_openticket_unifiedMoreWindow(lineId, forInvoiceFlag) {
                new Aurora.Window({
                    title: '$[l:conventional_expense_line_detail]',
                    id: 'EXP5110_exp_report_maintain_ticket_unified_lines_extend_window',
                    url: $au('EXP5110_exp_report_maintain_ticket_unified_lines_extend_link').getUrl() + '?moExpReportTypeId=$[/model/header_info/record/@moExpReportTypeId]&expReportLineId=' + lineId + '&forInvoiceFlag=' + (forInvoiceFlag === 'Y' ? 'Y' : 'N'),
                    side: 'right',
                    width: 1020
                });
            }
            
            function EXP5110_ticket_unifiedTaxEditorFun(record, name) {
                // Modify Tagin/2018.04.17 调整
                return new EXP5110_ticketUnifiedInvoice(record).edit(name);
            }
            
            function EXP5110_ticket_unifiedInvoiceValidator(record, name, value) {
                if (!record.dirty && !record.isNew) {
                    return true;
                }
                // 1.0 判断税额
                if (name == 'taxAmount') {
                    if (value < 0) {
                        return '$[l:vat_invoice_taxamount_positive]';
                    } else {
                        if (record.get('invoiceamount') && value) {
                            if (value > record.get('invoiceamount')) {
                                return '$[l:vat_invoice_tax_less_total]';
                            }
                        }
                    }
                    return true;
                }
                // 2.0 判断价税合计
                if (name == 'invoiceAmount') {
                    if (value < 0) {
                        return '$[l:vat_invoice_total_amount_positive]';
                    } else {
                        if (record.get('taxamount') && value) {
                            if (value < record.get('taxamount')) {
                                return '$[l:vat_invoice_total_more_tax]';
                            }
                        }
                    }
                    return true;
                }
                return true;
            }
            
            $au('EXP5110_exp_report_header_ds')['on']('beforesubmit', EXP5110_ticket_unifiedLineBeforeSubmit);
            $au('EXP5110_exp_report_header_ds')['on']('update', EXP5110_ticket_unifiedLineOnHeaderUpdate);
            $au('EXP5110_exp_report_header_ds')['on']('submitsuccess', function() {
                //如果当前拓展页面打开，则进行dists的查询，如果没有打开，则进行lines的查询
                if ($A.CmpManager.get('EXP5110_exp_report_maintain_ticket_unified_lines_extend_window')) {
                    $au('EXP5110_exp_report_ticket_unified_dist_ds').query();
                } else {
                    $au('EXP5110_exp_report_ticket_unified_line_ds').query();
                }
            });
            
            function EXPT5110_delete_line(ds) {
                var dataRecords = $au('EXP5110_exp_report_ticket_unified_line_ds').getJsonData(true);
                if (dataRecords.length < 1) {
                    Aurora.showMessage('$[l:prompt_message]', '$[l:prompt.please_select]', null, 250, 100);
                    return false;
                }
                Aurora.request({
                    lockMessage: '$[l:hap_waiting]',
                    url: $au('exp_report_ticket_unified_for_element_delete_link').getUrl(),
                    para: dataRecords,
                    success: function() {
                        $au('EXP5110_exp_report_ticket_unified_line_ds').query();
                    },
                    scope: this
                }).on('close', function() {});
            
            }
            
            function EXP5110_ticketUnifiedVatRenderer(value, record, name) {
                var index = $au('EXP5110_exp_report_ticket_unified_line_ds').indexOf(record);
                return '<a href="javascript:EXP5110_ticketUnifiedCancelLineRefInvoice(' + index + ');">$[l:cancelInvoice]</a>';
            }
            
            
            function EXP5110_ticketUnifiedCancelLineRefInvoice(index) {
                var record = $au('EXP5110_exp_report_ticket_unified_line_ds').getAt(index);
                var headerId = record.get('expReportHeaderId') || '';
                var lineId = record.get('expReportLineId') || '';
                if (record.get('vatcount') > 0) {
                    // Modify Tagin/2018.04.16 取消关联增值税发票信息
                    new EXP5110_ticketUnifiedInvoice().cancel(headerId, lineId, $au('EXP5110_exp_report_ticket_unified_line_ds'));
                }
                // Modify Tagin/2018.04.16 清空增值税发票信息
                new EXP5110_ticketUnifiedInvoice(record).clear();
            }
            
            function EXP5110_ticketUnifiedDocExchangeRateFunc(dataSet) {
                // Modify Tagin/2018.05.08 将获取的汇率设置到单据行
                var record = dataSet.getAt(0);
                var reportRd = $au('EXP5110_exp_report_ticket_unified_line_ds').getCurrentRecord();
                reportRd.set('biz2payExchangeRate', record.get('biz2payExchangeRate'));
                reportRd.set('pay2funExchangeRate', record.get('pay2funExchangeRate'));
            }
            
            function EXP5110_ticketUnifiedInvoiceLineAddFunc(dataSet, record, index) {
                // Modify Tagin/2018.05.21 若发票拆分税金/实际报销金额为空则赋值为税额
                record.set('reportAmount', record.get('reportAmount') ? record.get('reportAmount') : record.get('taxAmount'));
                record.set('splittedTaxAmount', record.get('splittedTaxAmount') ? record.get('splittedTaxAmount') : record.get('taxAmount'));
            }
            
            function EXP5110_ticketUnifiedInvoiceTypeLoadFunc(dataSet) {
                // Modify Tagin/2018.04.10 增加根据发票代码获取发票类型加载时动态设置单据行的发票类型字段
                var record = dataSet.getAt(0);
                var reportRd = $au('EXP5110_exp_report_ticket_unified_line_ds').getCurrentRecord();
                var invoiceType = record.get('invoiceType');
                if (reportRd.get('invoiceCode')) {
                    reportRd.set('invoiceSource', !reportRd.get('invoiceSource') ? 'MANUAL' : reportRd.get('invoiceSource'));
                    reportRd.set('invoiceType', invoiceType);
                } else {
                    reportRd.set('invoiceType', '');
                }
            }
            Aurora.onReady(EXP5110_ticket_unifiedLineInitVatColumn);
        ]]></script>
        <a:dataSets>
            <a:dataSet id="EXP5110_ticket_unified_place_type_default_ds" autoQuery="true" fetchAll="true" model="expm.EXP5110.exp_rep_mo_expense_types" queryUrl="$[/request/@context_path]/autocrud/expm.EXP5110.exp_rep_mo_expense_types/query?pageElementCode=TICKET_UNIFIED&amp;moExpReportTypeId=$[/model/header_info/record/@moExpReportTypeId]"/>
            <a:dataSet id="EXP5110_ticket_unified_place_type_ds" fetchAll="true" loadData="true" model="hec_util.exp_policy_place_types_vl_lov"/>
            <a:dataSet id="EXP5110_ticket_unified_expense_type_ds" autoQuery="true" fetchAll="true" model="hec_util.exp_util.exp_rep_mo_expense_types_vl_lov" queryUrl="$[/request/@context_path]/autocrud/hec_util.exp_util.exp_rep_mo_expense_types_vl_lov/query?pageElementCode=TICKET_UNIFIED&amp;moExpReportTypeId=$[/model/header_info/record/@moExpReportTypeId]"/>
            <!--Modified by Arthur.Chen Date:2017-09-20 19:42:31           	1.修改moExpenseItemName字段的编辑器为combobox模式，设置item的option的ds            -->
            <a:dataSet id="EXP5110_ticket_unified_items_ds" loadData="true" model="hec_util.exp_util.exp_rep_mo_expense_items_vl_lov"/>
            <a:dataSet id="EXP5110_ticket_unified_invoiceType_ds" lookupCode="VAT_invoiceType"/>
            <a:dataSet id="EXP5110_ticket_unified_tax_rate_type_ds" autoQuery="true" queryUrl="$[/request/@context_path]/autocrud/hec_util.fnd_tax_type_code_vl_lov/query?withholding_flag=N"/>
            <a:dataSet id="EXP5110_ticket_unifiedInvoiceCategory_ds" fetchAll="true" loadData="true" model="hec_util.vat_invoice_category_vl_lov"/>
            <!-- Modify Tagin/2018.05.08 
            		增加会单据业务币种-支付币种汇率、支付币种-本位币汇率获取逻辑
            -->
            <a:dataSet id="EXP5110_ticketUnifiedDocExchangeRate_ds" model="hec_util.get_doc_exchangeRate">
                <a:events>
                    <a:event name="load" handler="EXP5110_ticketUnifiedDocExchangeRateFunc"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="EXP5110_ticketUnifiedInvoiceTypeDs" model="hec_util.get_invoiceType">
                <a:events>
                    <a:event name="load" handler="EXP5110_ticketUnifiedInvoiceTypeLoadFunc"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="EXP5110_exp_report_ticket_unified_line_ds" autoQuery="true" bindName="ticket_unified_lines" bindTarget="EXP5110_exp_report_header_ds" queryDataSet="EXP5110_exp_report_header_ds" queryUrl="$[/request/@context_path]/expm/EXP5110/exp_report_travel_line_query.svc?expReportHeaderId=$[/model/header_infp/record/@expReportHeaderId]&amp;reportPageElementCode=TICKET_UNIFIED&amp;_ban_remind=Y" selectable="true" submitUrl="$[/request/@context_path]/autocrud/db.exp_report_pkg.delete_exp_report_lines/batch_update">
                <a:fields>
                    <a:field name="expReportHeaderId"/>
                    <a:field name="expReportLineId"/>
                    <a:field name="lineNumber" prompt="con_contract_element.line_number" required="true"/>
                    <a:field name="expRequisitionNumber" prompt="exp_report_line.relation_requisition_number"/>
                    <a:field name="reportPageElementCode" defaultValue="TICKET_UNIFIED" required="true"/>
                    <a:field name="description" prompt="exp_report_header.description"/>
                    <a:field name="companyName" lovCode="FND_COMPANY_LOV" prompt="acp_acp_requisition_hds.company_id" required="true">
                        <a:mapping>
                            <a:map from="companyName" to="companyName"/>
                            <a:map from="companyId" to="companyId"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="companyId"/>
                    <a:field name="accEntityName" lovCode="GLD_ACCOUNTING_ENTITY_VL_LOV" prompt="csh_offer_format.acc_entity" required="true">
                        <a:mapping>
                            <a:map from="accEntityName" to="accEntityName"/>
                            <a:map from="accEntityId" to="accEntityId"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="accEntityId"/>
                    <a:field name="unitName" lovCode="EXP_ORG_UNIT_VL_LOV" prompt="acp_acp_requisition_hds.unit_id" required="true">
                        <!--添加默认核算主体，默认责任中心，默认预算主体，默认预算中心映射   Y.duan 2017-8-31 19:37:31-->
                        <a:mapping>
                            <a:map from="unitName" to="unitName"/>
                            <a:map from="unitId" to="unitId"/>
                            <a:map from="defaultAccEntityId" to="accEntityId"/>
                            <a:map from="defaultResCenterId" to="respCenterId"/>
                            <a:map from="defaultBgtEntityId" to="bgtEntityId"/>
                            <a:map from="defaultBgtCenterId" to="bgtCenterId"/>
                            <a:map from="defaultAccEntityDisplay" to="accEntityName"/>
                            <a:map from="defaultResCentersDisplay" to="respCenterName"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="unitId"/>
                    <a:field name="positionName" lovCode="EXP_ORG_POSITION_VL_LOV" prompt="acp_acp_requisition_hds.position_id" required="true">
                        <a:mapping>
                            <a:map from="positionName" to="positionName"/>
                            <a:map from="positionId" to="positionId"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="positionId"/>
                    <a:field name="employeeName" lovCode="EXP_EMPLOYEE_VL_LOV" prompt="acp_acp_requisition_hds.employee_id" required="true">
                        <a:mapping>
                            <a:map from="name" to="employeeName"/>
                            <a:map from="employeeId" to="employeeId"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="employeeId"/>
                    <a:field name="respCenterName" lovCode="GLD_RESPONSIBILITY_CENTER_VL_LOV" prompt="acp_invoice_line.responsibility_center_id" required="true">
                        <a:mapping>
                            <a:map from="responsibilityCenterName" to="respCenterName"/>
                            <a:map from="responsibilityCenterId" to="respCenterId"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="respCenterId"/>
                    <a:field name="bgtEntityId"/>
                    <a:field name="bgtCenterId"/>
                    <a:field name="placeTypeName" readOnly="true"/>
                    <a:field name="placeTypeId"/>
                    <!--重新指定地点查询的lovCode 地点类型直接自动带出   Y.duan 2017-8-14 17:13:08-->
                    <a:field name="placeName" prompt="exp_report_line.place_id" lovCode="EXP_POLICY_PLACES_AND_TYPES_VL_LOV">
                        <a:mapping>
                            <a:map from="placeName" to="placeName"/>
                            <a:map from="placeId" to="placeId"/>
                            <a:map from="placeTypeId" to="placeTypeId"/>
                            <a:map from="placeTypeName" to="placeTypeName"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="placeId"/>
                    <a:field name="budgetItemName"/>
                    <a:field name="budgetItemId"/>
                    <a:field name="dateFrom" prompt="exp_report_line.date_from" required="true" validator="EXP5110_ticket_unifiedDateValidator"/>
                    <a:field name="dateTo" prompt="exp_report_line.date_to" required="true" validator="EXP5110_ticket_unifiedDateValidator"/>
                    <a:field name="periodName" lovCode="BGT_PERIODS_LOV">
                        <a:mapping>
                            <a:map from="periodName" to="periodName"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="moExpenseTypeName" displayField="moExpenseTypeName" options="EXP5110_ticket_unified_expense_type_ds" prompt="exp_expense_item_type.expense_type_id" required="true" returnField="moExpenseTypeId" valueField="moExpenseTypeId"/>
                    <a:field name="moExpenseTypeId"/>
                    <!--Modified by Arthur.Chen Date:2017-09-20 19:42:31          			 1.修改moExpenseItemName字段的编辑器为combobox模式,修改item的options为EXP5110_streamlined_items_ds             		 -->
                    <a:field name="moExpenseItemName" displayField="moExpenseItemName" options="EXP5110_ticket_unified_items_ds" prompt="acp_invoice_line.expense_item_id" required="true" tipField="tip">
                        <a:mapping>
                            <a:map from="moExpenseItemName" to="moExpenseItemName"/>
                            <a:map from="moExpenseItemId" to="moExpenseItemId"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="moExpenseItemId"/>
                    <a:field name="primaryQuantity" prompt="acp_invoice_line.quantity" required="true"/>
                    <a:field name="businessCurrencyName" displayField="currencyName" options="EXP5110_currency_ds" prompt="business_currency_name" required="true">
                        <a:mapping>
                            <a:map from="currencyCode" to="businessCurrencyCode"/>
                            <a:map from="precision" to="businessCurrencyPrecision"/>
                            <!-- Modify Tagin/2018.04.02 增加业务币种-支付币种汇率计算 -->
                            <a:map from="exchangeRate" to="biz2payExchangeRate"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="businessCurrencyCode"/>
                    <a:field name="biz2payExchangeTypeName"/>
                    <a:field name="biz2payExchangeRate"/>
                    <a:field name="businessPrice" prompt="business_price" required="true" validator="EXP5110_policyValidator"/>
                    <a:field name="businessAmount"/>
                    <a:field name="paymentCurrencyName"/>
                    <a:field name="paymentCurrencyCode"/>
                    <a:field name="pay2funExchangeTypeName"/>
                    <a:field name="pay2funExchangeRate"/>
                    <a:field name="paymentPrice"/>
                    <a:field name="paymentAmount"/>
                    <a:field name="managementCurrencyName"/>
                    <a:field name="managementCurrencyCode"/>
                    <a:field name="pay2magExchangeTypeName"/>
                    <a:field name="pay2magExchangeRate"/>
                    <a:field name="managementPrice"/>
                    <a:field name="managementAmount"/>
                    <a:field name="reportFunctionalAmount"/>
                    <!-- Modify Tagin/2018.04.12 将发票类型调整为从发票代码自动获取 / 增加发票种类字段 -->
                    <a:field name="invoiceCategoryName" displayField="invoiceCategoryName" fetchRemote="false" options="EXP5110_ticket_unifiedInvoiceCategory_ds" prompt="vat_invoice_item.invoice_category" returnField="invoiceCategoryId" valueField="invoiceCategoryId"/>
                    <a:field name="invoiceCategoryId"/>
                    <a:field name="invoiceType"/>
                    <a:field name="invoiceId"/>
                    <a:field name="invoiceLineId"/>
                    <a:field name="invoiceInfo" prompt="hap_more"/>
                    <a:field name="invoiceCode" fetchRemote="false" lovUrl="$[/request/@context_path]/expm/EXP5110/exp_report_maintain_select_invoice.screen" prompt="exp_report.invoice_code"/>
                    <a:field name="invoiceNumber" prompt="acp_invoice_header.invoice_number"/>
                    <a:field name="invoiceDate" prompt="vat_invoice.invoice_date"/>
                    <a:field name="invoiceAmount" prompt="total_ad_valorem_tax_invoice" validator="EXP5110_ticket_unifiedInvoiceValidator"/>
                    <a:field name="taxAmount" prompt="vat_invoice_line.tax_amount" validator="EXP5110_ticket_unifiedInvoiceValidator"/>
                    <a:field name="taxTypeName" displayField="taxTypeName" options="EXP5110_ticket_unified_tax_rate_type_ds" prompt="exp_report_line.tax_rate_type" validator="EXP5110_ticket_unifiedInvoiceValidator">
                        <a:mapping>
                            <a:map from="taxTypeId" to="taxTypeId"/>
                            <a:map from="taxCategory" to="taxCategory"/>
                            <a:map from="precision" to="precision"/>
                            <a:map from="autoCalculationFlag" to="autoCalculationFlag"/>
                            <a:map from="taxCategory" to="taxCategory"/>
                            <a:map from="taxTypeRate" to="taxTypeRate"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="taxTypeId"/>
                    <a:field name="taxTypeRate"/>
                    <a:field name="manualSplittedTaxFlag" defaultValue="N"/>
                    <a:field name="splittedTaxAmount" prompt="split_tax" validator="EXP5110_ticket_unifiedInvoiceValidator"/>
                    <a:field name="reportAmount"/>
                    <a:field name="more" prompt="&gt;&gt;"/>
                    <a:placeHolder id="EXP5110_ticket_unifiedLineDimensionFields"/>
                    <a:placeHolder id="EXP5110_ticket_unifiedLineObjectFields"/>
                </a:fields>
                <a:events>
                    <!-- <a:event name="load" handler="EXPT5110_onTicketUnifiedLineLoadFun"/> -->
                    <a:event name="update" handler="EXPT5110_onTicketUnifiedLineUpdateFun"/>
                    <a:event name="remove" handler="EXP5110_onHeadAmountChanged"/>
                </a:events>
            </a:dataSet>
            <!-- Modify Tagin/2018.05.18 增加报销单行关联发票行逻辑 【发票行可选择性被报销单关联】-->
            <a:dataSet id="EXP5110_ticketUnifiedInvoiceLineDs" autoCreate="true" bindName="invoiceLines" bindTarget="EXP5110_exp_report_ticket_unified_line_ds">
                <a:fields>
                    <a:field name="relationId"/>
                    <a:field name="documentCategory" defaultValue="EXP_REPORT"/>
                    <a:field name="invoiceId"/>
                    <a:field name="invoiceLineId"/>
                    <a:field name="documentId"/>
                    <a:field name="documentLineId"/>
                    <a:field name="documentDistId"/>
                    <a:field name="taxAmount"/>
                    <a:field name="splittedTaxAmount"/>
                    <a:field name="reportAmount"/>
                    <a:field name="manualSplittedTaxFlag"/>
                    <a:field name="taxTypeId"/>
                </a:fields>
                <a:events>
                    <a:event name="add" handler="EXP5110_ticketUnifiedInvoiceLineAddFunc"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="EXP5110_exp_report_ticket_unified_dist_ds" model="expm.EXP5110.exp_report_dist_query" selectable="true" submitUrl="$[/request/@context_path]/autocrud/db.exp_report_pkg.delete_exp_report_dists/batch_update">
                <a:fields>
                    <a:field name="expReportLineId"/>
                    <a:field name="expReportDistId"/>
                    <a:field name="description" prompt="exp_report_header.description"/>
                    <a:field name="companyName" lovCode="FND_COMPANY_LOV" prompt="acp_acp_requisition_hds.company_id" required="true">
                        <a:mapping>
                            <a:map from="companyName" to="companyName"/>
                            <a:map from="companyId" to="companyId"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="companyId" required="true"/>
                    <a:field name="accEntityName" lovCode="GLD_ACCOUNTING_ENTITY_VL_LOV" prompt="csh_offer_format.acc_entity" required="true">
                        <a:mapping>
                            <a:map from="accEntityName" to="accEntityName"/>
                            <a:map from="accEntityId" to="accEntityId"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="accEntityId" required="true"/>
                    <a:field name="unitName" lovCode="EXP_ORG_UNIT_VL_LOV" prompt="acp_acp_requisition_hds.unit_id" required="true">
                        <!--添加默认核算主体，默认责任中心，默认预算主体，默认预算中心映射   Y.duan 2017-8-31 19:37:31-->
                        <a:mapping>
                            <a:map from="unitName" to="unitName"/>
                            <a:map from="unitId" to="unitId"/>
                            <a:map from="defaultAccEntityId" to="accEntityId"/>
                            <a:map from="defaultResCenterId" to="respCenterId"/>
                            <a:map from="defaultBgtEntityId" to="bgtEntityId"/>
                            <a:map from="defaultBgtCenterId" to="bgtCenterId"/>
                            <a:map from="defaultAccEntityDisplay" to="accEntityName"/>
                            <a:map from="defaultResCentersDisplay" to="respCenterName"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="unitId" required="true"/>
                    <a:field name="positionName" lovCode="EXP_ORG_POSITION_VL_LOV" prompt="acp_acp_requisition_hds.position_id" required="true">
                        <a:mapping>
                            <a:map from="positionName" to="positionName"/>
                            <a:map from="positionId" to="positionId"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="positionId" required="true"/>
                    <a:field name="employeeName" lovCode="EXP_EMPLOYEE_VL_LOV" prompt="acp_acp_requisition_hds.employee_id" required="true">
                        <a:mapping>
                            <a:map from="name" to="employeeName"/>
                            <a:map from="employeeId" to="employeeId"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="employeeId" required="true"/>
                    <a:field name="respCenterName" lovCode="GLD_RESPONSIBILITY_CENTER_VL_LOV" prompt="acp_invoice_line.responsibility_center_id" required="true">
                        <a:mapping>
                            <a:map from="responsibilityCenterName" to="respCenterName"/>
                            <a:map from="responsibilityCenterId" to="respCenterId"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="respCenterId" required="true"/>
                    <a:field name="bgtEntityId" required="true"/>
                    <a:field name="bgtCenterId" required="true"/>
                    <a:field name="placeTypeName" readOnly="true"/>
                    <a:field name="placeTypeId"/>
                    <a:field name="budgetItemName"/>
                    <a:field name="budgetItemId"/>
                    <a:field name="periodName" lovCode="BGT_PERIODS_LOV">
                        <a:mapping>
                            <a:map from="periodName" to="periodName"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="moExpenseTypeName" displayField="moExpenseTypeName" options="EXP5110_ticket_unified_expense_type_ds" prompt="exp_expense_item_type.expense_type_id" required="true" returnField="moExpenseTypeId" valueField="moExpenseTypeId"/>
                    <a:field name="moExpenseTypeId" required="true"/>
                    <!--Modified by Arthur.Chen Date:2017-09-20 19:42:31          			 1.修改moExpenseItemName字段的编辑器为combobox模式,修改item的options为EXP5110_streamlined_items_ds             		 -->
                    <a:field name="moExpenseItemName" displayField="moExpenseItemName" options="EXP5110_ticket_unified_items_ds" prompt="acp_invoice_line.expense_item_id" required="true" tipField="tip">
                        <a:mapping>
                            <a:map from="moExpenseItemName" to="moExpenseItemName"/>
                            <a:map from="moExpenseItemId" to="moExpenseItemId"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="moExpenseItemId" required="true"/>
                    <a:field name="primaryQuantity" required="true"/>
                    <a:field name="businessCurrencyName" displayField="currencyName" options="EXP5110_currency_ds" required="true">
                        <a:mapping>
                            <a:map from="currencyCode" to="businessCurrencyCode"/>
                            <a:map from="precision" to="businessCurrencyPrecision"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="businessCurrencyCode" required="true"/>
                    <a:field name="biz2payExchangeTypeName"/>
                    <a:field name="biz2payExchangeRate" required="true"/>
                    <a:field name="businessPrice" prompt="business_price" required="true" validator="EXP5110_policyValidator"/>
                    <a:field name="businessAmount" required="true"/>
                    <a:field name="paymentCurrencyName" required="true"/>
                    <a:field name="paymentCurrencyCode" required="true"/>
                    <a:field name="pay2funExchangeTypeName"/>
                    <a:field name="pay2funExchangeRate" required="true"/>
                    <a:field name="paymentPrice" required="true"/>
                    <a:field name="paymentAmount" required="true"/>
                    <a:field name="managementCurrencyName" required="true"/>
                    <a:field name="managementCurrencyCode" required="true"/>
                    <a:field name="pay2magExchangeTypeName"/>
                    <a:field name="pay2magExchangeRate" required="true"/>
                    <a:field name="managementPrice" required="true"/>
                    <a:field name="managementAmount" required="true"/>
                    <a:field name="reportFunctionalAmount" required="true"/>
                    <a:field name="invoiceId"/>
                    <a:field name="invoiceLineId"/>
                    <a:field name="invoiceInfo" prompt="acp_invoice_header.invoice_news"/>
                    <a:field name="invoiceCode" prompt="exp_report.invoice_code"/>
                    <a:field name="invoiceNumber" prompt="acp_invoice_header.invoice_number"/>
                    <a:field name="invoiceDate" prompt="vat_invoice.invoice_date"/>
                    <a:field name="invoiceAmount" prompt="total_ad_valorem_tax_invoice" validator="EXP5110_ticket_unifiedInvoiceValidator"/>
                    <a:field name="taxAmount" prompt="TOTAL_INVOICE_TAX" validator="EXP5110_ticket_unifiedInvoiceValidator"/>
                    <a:field name="invoiceItemName" lovCode="VAT_INVOICE_ITEM_VL_LOV" prompt="exp_report.invoice_item" validator="EXP5110_invoiceItemValidator">
                        <a:mapping>
                            <a:map from="invoiceItemName" to="invoiceItemName"/>
                            <a:map from="invoiceItemId" to="invoiceItemId"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="invoiceItemId"/>
                    <a:field name="invoiceUsedeName" lovCode="VAT_INVOICE_USEDE_VL_LOV" prompt="exp_report.invoice_usede" validator="EXP5110_invoiceUsedeValidator">
                        <a:mapping>
                            <a:map from="invoiceUsedeName" to="invoiceUsedeName"/>
                            <a:map from="invoiceUsedeId" to="invoiceUsedeId"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="invoiceUsedeId"/>
                    <a:field name="splittedTaxAmount" prompt="split_tax" validator="EXP5110_ticket_unifiedInvoiceValidator"/>
                    <a:field name="taxTypeName" displayField="taxTypeName" options="EXP5110_ticket_unified_tax_rate_type_ds" prompt="exp_report_line.tax_rate_type">
                        <a:mapping>
                            <a:map from="taxTypeId" to="taxTypeId"/>
                            <a:map from="taxTypeRate" to="taxTypeRate"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="taxTypeId"/>
                    <a:field name="taxTypeRate"/>
                </a:fields>
                <a:events>
                    <a:event name="update" handler="EXPT5110_onticket_unifiedDistUpdateFun"/>
                </a:events>
            </a:dataSet>
        </a:dataSets>
        <a:form padding="0" showmargin="0" style="margin-top:10px;" title="$[/model/ticket_unified_description/record/@lineDescription]">
            <a:grid id="EXP5110_ticket_unified_lines_grid" autoAdjustHeight="true" bindTarget="EXP5110_exp_report_ticket_unified_line_ds" height="600" marginWidth="12" navBar="true" showRowNumber="false">
                <a:toolBar>
                    <a:placeHolder id="EXP5110_ticketUnifiedLineAddBtnPlace"/>
                    <a:placeHolder id="EXP5110_ticketUnifiedFromReqBtnPlace"/>
                    <a:button type="delete"/>
                </a:toolBar>
                <a:columns>
                    <a:column name="lineNumber" lock="true" width="50"/>
                    <a:column name="description" editor="EXP5110_ticket_unified_ta" width="150"/>
                    <a:column name="expRequisitionNumber" align="center" width="120"/>
                    <a:column name="moExpenseTypeName" editor="EXP5110_ticket_unified_cb" width="120"/>
                    <a:column name="moExpenseItemName" editor="EXP5110_ticket_unified_cb" width="120"/>
                    <a:column name="placeName" editor="EXP5110_ticket_unified_lov" prompt="exp_report_line.place_id" width="120"/>
                    <a:column name="dateFrom" editor="EXP5110_ticket_unified_dp" renderer="Aurora.formatDateTime" width="80"/>
                    <a:column name="dateTo" editor="EXP5110_ticket_unified_dp" renderer="Aurora.formatDateTime" width="80"/>
                    <a:column name="businessCurrencyName" editor="EXP5110_ticket_unified_cb" width="80"/>
                    <a:column name="businessPrice" editorFunction="EXP5110_ticket_unifiedBizPriceEditorFun" renderer="Aurora.formatMoney" width="100"/>
                    <a:column name="primaryQuantity" editor="EXP5110_ticket_unified_nf_0" width="100"/>
                    <a:column name="periodName" editor="EXP5110_ticket_unified_lov" prompt="bgt_balance_running_parameters.bgt_period_num" width="80"/>
                    <a:column name="employeeName" editor="EXP5110_ticket_unified_lov" width="120"/>
                    <a:column name="unitName" editor="EXP5110_ticket_unified_lov" width="120"/>
                    <a:column name="accEntityName" editor="EXP5110_ticket_unified_lov" width="120"/>
                    <a:column name="respCenterName" editor="EXP5110_ticket_unified_lov" width="120"/>
                    <a:column name="invoiceCategoryName" align="center" editorFunction="EXP5110_ticket_unifiedTaxEditorFun" width="100"/>
                    <a:column name="invoiceCode" align="center" editorFunction="EXP5110_ticket_unifiedTaxEditorFun" width="100"/>
                    <a:column name="invoiceNumber" align="center" editorFunction="EXP5110_ticket_unifiedTaxEditorFun" width="100"/>
                    <a:column name="invoiceDate" align="center" editorFunction="EXP5110_ticket_unifiedTaxEditorFun" renderer="Aurora.formatDateTime" width="100"/>
                    <a:column name="invoiceAmount" align="right" editorFunction="EXP5110_ticket_unifiedTaxEditorFun" renderer="Aurora.formatMoney" width="100"/>
                    <a:column name="taxTypeName" align="center" editorFunction="EXP5110_ticket_unifiedTaxEditorFun" width="100"/>
                    <a:column name="taxAmount" align="right" editorFunction="EXP5110_ticket_unifiedTaxEditorFun" renderer="Aurora.formatMoney" width="100"/>
                    <a:column name="invoiceInfo" align="center" renderer="EXP5110_ticket_unifiedLineInvoiceInfoRenderer" width="120"/>
                    <a:column name="cancelInvoice" align="center" renderer="EXP5110_ticketUnifiedVatRenderer" width="100"/>
                    <a:placeHolder id="EXP5110_ticket_unifiedLineDimensionColumns"/>
                    <a:placeHolder id="EXP5110_ticket_unifiedLineObjectColumns"/>
                </a:columns>
                <a:events>
                    <a:event name="cellclick" handler="EXP5110_onticket_unifiedLineCellClickFun"/>
                </a:events>
                <a:editors>
                    <a:numberField id="EXP5110_ticket_unified_nf"/>
                    <a:textField id="EXP5110_ticket_unified_tf"/>
                    <a:textArea id="EXP5110_ticket_unified_ta"/>
                    <a:lov id="EXP5110_ticket_unified_lov"/>
                    <a:comboBox id="EXP5110_ticket_unified_cb"/>
                    <a:dateTimePicker id="EXP5110_ticket_unified_dp"/>
                    <a:numberField id="EXP5110_ticket_unified_nf_0" allowDecimals="false" allowNegative="false"/>
                    <a:numberField id="EXP5110_ticket_unified_nf_1" allowDecimals="true" decimalPrecision="1"/>
                    <a:numberField id="EXP5110_ticket_unified_nf_2" allowDecimals="true" decimalPrecision="2"/>
                    <a:numberField id="EXP5110_ticket_unified_nf_3" allowDecimals="true" decimalPrecision="3"/>
                    <a:numberField id="EXP5110_ticket_unified_nf_4" allowDecimals="true" decimalPrecision="4"/>
                    <a:numberField id="EXP5110_ticket_unified_nf_5" allowDecimals="true" decimalPrecision="5"/>
                    <a:numberField id="EXP5110_ticket_unified_nf_6" allowDecimals="true" decimalPrecision="6"/>
                </a:editors>
            </a:grid>
        </a:form>
    </a:view>
    <a:view-config>
        <c:create-config targetId="EXP5110_ticket_unifiedLineDimensionFields">
            <p:loop source="/model/ticket_unified_line_dimensions">
                <c:process-config>
                    <a:field name="$[@displayField]" defaultValue="$[@defaultDimValueName]" lovCode="FND_DIMENSION_VALUE_VL_LOV?dimensionId=$[@dimensionId]&amp;companylevel=$[@companyLevel]" prompt="$[@dimensionName]" required="true" title="$[@dimensionName]">
                        <a:mapping>
                            <a:map from="dimensionValueId" to="$[@displayField]"/>
                            <a:map from="dimensionValueId" to="$[@returnField]"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="$[@returnField]" defaultValue="$[@defaultDimValueId]"/>
                    <a:field name="$[@levelField]" defaultValue="$[@companyLevel]"/>
                </c:process-config>
            </p:loop>
        </c:create-config>
        <c:create-config targetId="EXP5110_ticket_unifiedLineDimensionColumns">
            <p:loop source="/model/ticket_unified_line_dimensions">
                <c:process-config>
                    <a:column name="$[@displayField]" editor="EXP5110_ticket_unified_lov" prompt="$[@dimensionName]" width="120"/>
                </c:process-config>
            </p:loop>
        </c:create-config>
        <c:create-config targetId="EXP5110_ticket_unifiedLineObjectFields">
            <p:loop source="/model/ticket_unified_line_objects">
                <c:process-config>
                    <a:field name="$[@displayField]" defaultValue="$[@dftMoExpenseObjectName]" lovCode="hec_util.exp_mo_expense_object_value_vl_lov?moExpObjTypeId=$[@moExpObjTypeId]" prompt="$[@moExpObjTypeName]" required="$[@requiredFlag]" title="$@moExpObjTypeName]">
                        <a:mapping>
                            <a:map from="name" to="$[@displayField]"/>
                            <a:map from="id" to="$[@returnField]"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="$[@returnField]" defaultValue="$[@dftMoExpenseObjectId]"/>
                </c:process-config>
            </p:loop>
        </c:create-config>
        <c:create-config targetId="EXP5110_ticket_unifiedLineObjectColumns">
            <p:loop source="/model/ticket_unified_line_objects">
                <p:switch test="@expense_object_method">
                    <p:case value="DESC_TEXT">
                        <c:process-config>
                            <a:column name="$[@displayField]" editor="EXP5110_ticket_unified_tf" prompt="$[@dimensionName]" width="120"/>
                        </c:process-config>
                    </p:case>
                    <p:case>
                        <c:process-config>
                            <a:column name="$[@displayField]" editor="EXP5110_ticket_unified_lov" prompt="$[@dimensionName]" width="120"/>
                        </c:process-config>
                    </p:case>
                </p:switch>
            </p:loop>
        </c:create-config>
        <c:create-config targetId="EXP5110_ticketUnifiedLineAddBtnPlace">
            <p:switch test="/model/header_info/record/@req_required_flag">
                <p:case value="Y">
                    <c:process-config>
                        <a:button click="EXP5110_ticket_unifiedLineCopy" icon="$[/request/@context_path]/images/hap/copy-1.png" skin="custom" text="FND_CALENDAR.COPY"/>
                    </c:process-config>
                </p:case>
                <p:case value="*">
                    <c:process-config>
                        <a:button click="EXP5110_ticketUnifiedLineAdd" type="add"/>
                    </c:process-config>
                </p:case>
            </p:switch>
        </c:create-config>
        <c:create-config targetId="EXP5110_ticketUnifiedFromReqBtnPlace">
            <p:switch test="/model/header_info/record/@relationMethodCode">
                <p:case value="LINE">
                    <c:process-config>
                        <a:button click="EXP5110_ticket_unifiedCreateFromReq" icon="$[/request/@context_path]/resources/image/aurora/hap/source-doc.png" skin="custom" text="EXP_REPORT_CREATE.FROMREQ"/>
                    </c:process-config>
                </p:case>
            </p:switch>
        </c:create-config>
    </a:view-config>
</a:screen>
